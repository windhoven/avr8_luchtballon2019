
Luchtballon2019.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000602  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000602  000006b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800066  00800066  000006bc  2**0
                  ALLOC
  3 .eeprom       00000005  00810000  00810000  000006bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000006c1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  00000738  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000eb9  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000068c  00000000  00000000  00001711  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000857  00000000  00000000  00001d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000120  00000000  00000000  000025f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000536  00000000  00000000  00002714  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000550  00000000  00000000  00002c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a8  00000000  00000000  0000319a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	93 c0       	rjmp	.+294    	; 0x136 <__vector_7>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e2 e0       	ldi	r30, 0x02	; 2
  36:	f6 e0       	ldi	r31, 0x06	; 6
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a6 36       	cpi	r26, 0x66	; 102
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a6 e6       	ldi	r26, 0x66	; 102
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	ae 37       	cpi	r26, 0x7E	; 126
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	21 d1       	rcall	.+578    	; 0x298 <main>
  56:	d3 c2       	rjmp	.+1446   	; 0x5fe <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <_Z10USART_Initv>:
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
}
  5a:	12 b8       	out	0x02, r1	; 2
  5c:	85 e0       	ldi	r24, 0x05	; 5
  5e:	89 b9       	out	0x09, r24	; 9
  60:	80 e9       	ldi	r24, 0x90	; 144
  62:	8a b9       	out	0x0a, r24	; 10
  64:	86 e0       	ldi	r24, 0x06	; 6
  66:	83 b9       	out	0x03, r24	; 3
  68:	08 95       	ret

0000006a <_Z11resetBufferv>:
  6a:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <_ZL9rx_buffer>
  6e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <_ZL10data_count>
  72:	08 95       	ret

00000074 <_Z14processCommandv>:
  74:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <_ZL13command_ready>
  78:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <_ZL10command_in+0x1>
  7c:	88 23       	and	r24, r24
  7e:	24 f4       	brge	.+8      	; 0x88 <_Z14processCommandv+0x14>
  80:	8e e1       	ldi	r24, 0x1E	; 30
  82:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ZL9misschien>
  86:	0c c0       	rjmp	.+24     	; 0xa0 <_Z14processCommandv+0x2c>
  88:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <_ZL9misschien>
  8c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <b1_geel_aan>
  90:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <b2_geel_aan>
  94:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <b1_oranje_aan>
  98:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <b2_oranje_aan>
  9c:	8f e0       	ldi	r24, 0x0F	; 15
  9e:	88 bb       	out	0x18, r24	; 24
  a0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <_ZL6ignore>
  a4:	08 95       	ret

000000a6 <_Z15putCharToBufferh>:
  a6:	cf 93       	push	r28
  a8:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <_ZL13command_ready>
  ac:	91 30       	cpi	r25, 0x01	; 1
  ae:	09 f4       	brne	.+2      	; 0xb2 <_Z15putCharToBufferh+0xc>
  b0:	40 c0       	rjmp	.+128    	; 0x132 <__stack+0x53>
  b2:	c8 2f       	mov	r28, r24
  b4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <_ZL10data_count>
  b8:	86 30       	cpi	r24, 0x06	; 6
  ba:	20 f0       	brcs	.+8      	; 0xc4 <_Z15putCharToBufferh+0x1e>
  bc:	d6 df       	rcall	.-84     	; 0x6a <_Z11resetBufferv>
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <_ZL6ignore>
  c4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <_ZL10data_count>
  c8:	81 11       	cpse	r24, r1
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <_Z15putCharToBufferh+0x2e>
  cc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  d0:	8c 13       	cpse	r24, r28
  d2:	2b c0       	rjmp	.+86     	; 0x12a <__stack+0x4b>
  d4:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <_ZL10data_count>
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	8e 0f       	add	r24, r30
  dc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <_ZL10data_count>
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	e8 58       	subi	r30, 0x88	; 136
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	c0 83       	st	Z, r28
  e8:	ca 30       	cpi	r28, 0x0A	; 10
  ea:	19 f5       	brne	.+70     	; 0x132 <__stack+0x53>
  ec:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <_ZL6ignore>
  f0:	81 11       	cpse	r24, r1
  f2:	11 c0       	rjmp	.+34     	; 0x116 <__stack+0x37>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <_ZL13command_ready>
  fa:	e2 e7       	ldi	r30, 0x72	; 114
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	dc 01       	movw	r26, r24
 104:	a8 58       	subi	r26, 0x88	; 136
 106:	bf 4f       	sbci	r27, 0xFF	; 255
 108:	2c 91       	ld	r18, X
 10a:	21 93       	st	Z+, r18
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	86 30       	cpi	r24, 0x06	; 6
 110:	91 05       	cpc	r25, r1
 112:	b9 f7       	brne	.-18     	; 0x102 <__stack+0x23>
 114:	af df       	rcall	.-162    	; 0x74 <_Z14processCommandv>
 116:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <_ZL6ignore>
 11a:	a7 df       	rcall	.-178    	; 0x6a <_Z11resetBufferv>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	98 e0       	ldi	r25, 0x08	; 8
 120:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <_ZL12lastCmdCount+0x1>
 124:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <_ZL12lastCmdCount>
 128:	04 c0       	rjmp	.+8      	; 0x132 <__stack+0x53>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <_ZL6ignore>
 130:	d1 cf       	rjmp	.-94     	; 0xd4 <_Z15putCharToBufferh+0x2e>
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <__vector_7>:
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	4f 93       	push	r20
 146:	5f 93       	push	r21
 148:	6f 93       	push	r22
 14a:	7f 93       	push	r23
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
 158:	8c b1       	in	r24, 0x0c	; 12
 15a:	a5 df       	rcall	.-182    	; 0xa6 <_Z15putCharToBufferh>
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <_Z7branderRVhS0_S0_cc>:

void brander(volatile uint8_t& b_geel_aan,volatile uint8_t& b_oranje_aan,volatile uint8_t& b_reset, char pin_geel /* 1 */, char pin_oranje /* 0 */) {
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	ec 01       	movw	r28, r24
 18c:	7b 01       	movw	r14, r22
 18e:	12 2f       	mov	r17, r18
	if (b_geel_aan == TRUE) {
 190:	88 81       	ld	r24, Y
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	11 f5       	brne	.+68     	; 0x1da <_Z7branderRVhS0_S0_cc+0x5c>
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 196:	a0 d1       	rcall	.+832    	; 0x4d8 <rand>
}

void brander(volatile uint8_t& b_geel_aan,volatile uint8_t& b_oranje_aan,volatile uint8_t& b_reset, char pin_geel /* 1 */, char pin_oranje /* 0 */) {
	if (b_geel_aan == TRUE) {
		if (myRandomValue(0,B_ORANJE) ==0) {
 198:	6b ea       	ldi	r22, 0xAB	; 171
 19a:	7a e2       	ldi	r23, 0x2A	; 42
 19c:	2c d1       	rcall	.+600    	; 0x3f6 <__divmodhi4>
 19e:	67 2b       	or	r22, r23
 1a0:	79 f4       	brne	.+30     	; 0x1c0 <_Z7branderRVhS0_S0_cc+0x42>
			PORTB &= ~(1 << pin_geel); // High
 1a2:	28 b3       	in	r18, 0x18	; 24
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <_Z7branderRVhS0_S0_cc+0x30>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	1a 95       	dec	r17
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <_Z7branderRVhS0_S0_cc+0x2c>
 1b2:	80 95       	com	r24
 1b4:	82 23       	and	r24, r18
 1b6:	88 bb       	out	0x18, r24	; 24
			b_oranje_aan = TRUE;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	f7 01       	movw	r30, r14
 1bc:	80 83       	st	Z, r24
 1be:	26 c0       	rjmp	.+76     	; 0x20c <_Z7branderRVhS0_S0_cc+0x8e>
		} else {
			PORTB  |= (1 << pin_geel);  // Low
 1c0:	28 b3       	in	r18, 0x18	; 24
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <_Z7branderRVhS0_S0_cc+0x4e>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	1a 95       	dec	r17
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <_Z7branderRVhS0_S0_cc+0x4a>
 1d0:	82 2b       	or	r24, r18
 1d2:	88 bb       	out	0x18, r24	; 24
			b_oranje_aan = FALSE;
 1d4:	f7 01       	movw	r30, r14
 1d6:	10 82       	st	Z, r1
 1d8:	19 c0       	rjmp	.+50     	; 0x20c <_Z7branderRVhS0_S0_cc+0x8e>
		}
	} else {
		if (b_oranje_aan == TRUE) {
 1da:	fb 01       	movw	r30, r22
 1dc:	80 81       	ld	r24, Z
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	a9 f4       	brne	.+42     	; 0x20c <_Z7branderRVhS0_S0_cc+0x8e>
			b_reset+=1;
 1e2:	fa 01       	movw	r30, r20
 1e4:	80 81       	ld	r24, Z
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	80 83       	st	Z, r24
			
			if (b_reset >=5)
 1ea:	80 81       	ld	r24, Z
 1ec:	85 30       	cpi	r24, 0x05	; 5
 1ee:	70 f0       	brcs	.+28     	; 0x20c <_Z7branderRVhS0_S0_cc+0x8e>
			{
				PORTB |= (1 << pin_geel);  // Low
 1f0:	28 b3       	in	r18, 0x18	; 24
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <_Z7branderRVhS0_S0_cc+0x7e>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	1a 95       	dec	r17
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <_Z7branderRVhS0_S0_cc+0x7a>
 200:	82 2b       	or	r24, r18
 202:	88 bb       	out	0x18, r24	; 24
				b_oranje_aan = FALSE;
 204:	fb 01       	movw	r30, r22
 206:	10 82       	st	Z, r1
				
				b_reset = 0;
 208:	fa 01       	movw	r30, r20
 20a:	10 82       	st	Z, r1
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 20c:	65 d1       	rcall	.+714    	; 0x4d8 <rand>
				b_reset = 0;
			}
		}
	}
	
	if (myRandomValue(0,B_GEEL) ==0) { 
 20e:	81 15       	cp	r24, r1
 210:	90 48       	sbci	r25, 0x80	; 128
 212:	01 f1       	breq	.+64     	; 0x254 <_Z7branderRVhS0_S0_cc+0xd6>
		if (b_geel_aan == FALSE) {
 214:	88 81       	ld	r24, Y
 216:	81 11       	cpse	r24, r1
 218:	0e c0       	rjmp	.+28     	; 0x236 <_Z7branderRVhS0_S0_cc+0xb8>
			PORTB &= ~(1 << pin_oranje);
 21a:	28 b3       	in	r18, 0x18	; 24
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <_Z7branderRVhS0_S0_cc+0xa8>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	0a 95       	dec	r16
 228:	e2 f7       	brpl	.-8      	; 0x222 <_Z7branderRVhS0_S0_cc+0xa4>
 22a:	80 95       	com	r24
 22c:	82 23       	and	r24, r18
 22e:	88 bb       	out	0x18, r24	; 24
			b_geel_aan = TRUE;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	88 83       	st	Y, r24
 234:	0f c0       	rjmp	.+30     	; 0x254 <_Z7branderRVhS0_S0_cc+0xd6>
		} else {
			if (b_oranje_aan == FALSE) {
 236:	f7 01       	movw	r30, r14
 238:	80 81       	ld	r24, Z
 23a:	81 11       	cpse	r24, r1
 23c:	0b c0       	rjmp	.+22     	; 0x254 <_Z7branderRVhS0_S0_cc+0xd6>
				PORTB |= (1 << pin_oranje);
 23e:	28 b3       	in	r18, 0x18	; 24
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <_Z7branderRVhS0_S0_cc+0xcc>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	0a 95       	dec	r16
 24c:	e2 f7       	brpl	.-8      	; 0x246 <_Z7branderRVhS0_S0_cc+0xc8>
 24e:	82 2b       	or	r24, r18
 250:	88 bb       	out	0x18, r24	; 24
				b_geel_aan = FALSE;
 252:	18 82       	st	Y, r1
			}
		}
	}
}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	ff 90       	pop	r15
 25e:	ef 90       	pop	r14
 260:	08 95       	ret

00000262 <_Z8initrandv>:
void initrand()
{
        uint32_t state;
        static uint32_t EEMEM sstate = 1;

        state = eeprom_read_dword(&sstate);
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	4e d1       	rcall	.+668    	; 0x504 <eeprom_read_dword>

        // Check if it's unwritten EEPROM (first time). Use something funny in that case.
        if (state == 0xffffffUL)
 268:	6f 3f       	cpi	r22, 0xFF	; 255
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	72 07       	cpc	r23, r18
 26e:	82 07       	cpc	r24, r18
 270:	91 05       	cpc	r25, r1
 272:	21 f4       	brne	.+8      	; 0x27c <_Z8initrandv+0x1a>
                state = 0xDEADBEEFUL;
 274:	6f ee       	ldi	r22, 0xEF	; 239
 276:	7e eb       	ldi	r23, 0xBE	; 190
 278:	8d ea       	ldi	r24, 0xAD	; 173
 27a:	9e ed       	ldi	r25, 0xDE	; 222
        srand(state);
 27c:	cb 01       	movw	r24, r22
 27e:	30 d1       	rcall	.+608    	; 0x4e0 <srand>
		
		state = !state;
        eeprom_write_dword(&sstate,rand());
 280:	2b d1       	rcall	.+598    	; 0x4d8 <rand>
 282:	ac 01       	movw	r20, r24
 284:	99 0f       	add	r25, r25
 286:	66 0b       	sbc	r22, r22
 288:	77 0b       	sbc	r23, r23
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	3d d1       	rcall	.+634    	; 0x50a <eeprom_write_dword>
		 
		 misschien = RANDOMNESS;
 290:	8e e1       	ldi	r24, 0x1E	; 30
 292:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ZL9misschien>
 296:	08 95       	ret

00000298 <main>:

int main(void)
{		
	//DDRB  = 0x0F; // set PORTB for output = 0xff
	//PORTB  = 0x0F; // 0x00 = OFF all LEDs initially
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2) | (1<<DDB3) ; // = outputs voor branders
 298:	8f e0       	ldi	r24, 0x0F	; 15
 29a:	87 bb       	out	0x17, r24	; 23
	PORTB  = ALL_LED_PINS;
 29c:	88 bb       	out	0x18, r24	; 24
	
	USART_Init();
 29e:	dd de       	rcall	.-582    	; 0x5a <_Z10USART_Initv>
	
	eAddress = eeprom_read_byte(&deviceConfig);
 2a0:	84 e0       	ldi	r24, 0x04	; 4
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	28 d1       	rcall	.+592    	; 0x4f6 <eeprom_read_byte>
 2a6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>

	
	sei();
 2aa:	78 94       	sei

	initrand();
 2ac:	da df       	rcall	.-76     	; 0x262 <_Z8initrandv>
	
	uint16_t doNothingTime = 0;
	uint8_t tel_aan =0;
 2ae:	10 e0       	ldi	r17, 0x00	; 0
	
	sei();

	initrand();
	
	uint16_t doNothingTime = 0;
 2b0:	c0 e0       	ldi	r28, 0x00	; 0
 2b2:	d0 e0       	ldi	r29, 0x00	; 0
				
				if (tel_aan > 0) {
					tel_aan--;
				}
				if (misschien ==  RANDOMNESS && tel_aan ==0) {
					tel_aan =  myRandomValue(50,50);
 2b4:	0f 2e       	mov	r0, r31
 2b6:	f0 e9       	ldi	r31, 0x90	; 144
 2b8:	8f 2e       	mov	r8, r31
 2ba:	f2 e0       	ldi	r31, 0x02	; 2
 2bc:	9f 2e       	mov	r9, r31
 2be:	f0 2d       	mov	r31, r0
				doNothingTime =2000;
			}
			
			
			if (lastCmdCount == 0) {
				misschien =  myRandomValue(0,254); //rand() / (RAND_MAX / 254 + 1) ;
 2c0:	0f 2e       	mov	r0, r31
 2c2:	f2 e8       	ldi	r31, 0x82	; 130
 2c4:	ef 2e       	mov	r14, r31
 2c6:	f1 2c       	mov	r15, r1
 2c8:	f0 2d       	mov	r31, r0
					} else {
					b1_geel_aan = FALSE;
					b2_geel_aan = FALSE;
					b1_oranje_aan = FALSE;
					b2_oranje_aan = FALSE;
					PORTB = ALL_LED_PINS;
 2ca:	0f 2e       	mov	r0, r31
 2cc:	ff e0       	ldi	r31, 0x0F	; 15
 2ce:	7f 2e       	mov	r7, r31
 2d0:	f0 2d       	mov	r31, r0
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 2d2:	0f 2e       	mov	r0, r31
 2d4:	f8 e4       	ldi	r31, 0x48	; 72
 2d6:	af 2e       	mov	r10, r31
 2d8:	bb 24       	eor	r11, r11
 2da:	b3 94       	inc	r11
 2dc:	f0 2d       	mov	r31, r0
 2de:	0f 2e       	mov	r0, r31
 2e0:	f4 ea       	ldi	r31, 0xA4	; 164
 2e2:	cf 2e       	mov	r12, r31
 2e4:	d1 2c       	mov	r13, r1
 2e6:	f0 2d       	mov	r31, r0
	uint8_t tel_aan =0;
	while(1)
	{

		//TODO:: Please write your application code
		if (doNothingTime > 0) {
 2e8:	20 97       	sbiw	r28, 0x00	; 0
 2ea:	11 f0       	breq	.+4      	; 0x2f0 <main+0x58>
			doNothingTime--;
 2ec:	21 97       	sbiw	r28, 0x01	; 1
 2ee:	fc cf       	rjmp	.-8      	; 0x2e8 <main+0x50>
			} else {
			if (misschien ==  RANDOMNESS || tel_aan > 0 || ( b1_geel_aan > 0  || b2_geel_aan > 0 || b1_oranje_aan > 0 || b2_oranje_aan > 0) ) {
 2f0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZL9misschien>
 2f4:	8e 31       	cpi	r24, 0x1E	; 30
 2f6:	a9 f0       	breq	.+42     	; 0x322 <main+0x8a>
 2f8:	11 11       	cpse	r17, r1
 2fa:	16 c0       	rjmp	.+44     	; 0x328 <main+0x90>
 2fc:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <b1_geel_aan>
 300:	81 11       	cpse	r24, r1
 302:	73 c0       	rjmp	.+230    	; 0x3ea <main+0x152>
 304:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <b2_geel_aan>
 308:	81 11       	cpse	r24, r1
 30a:	6f c0       	rjmp	.+222    	; 0x3ea <main+0x152>
 30c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <b1_oranje_aan>
 310:	81 11       	cpse	r24, r1
 312:	6b c0       	rjmp	.+214    	; 0x3ea <main+0x152>
 314:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <b2_oranje_aan>
 318:	81 11       	cpse	r24, r1
 31a:	07 c0       	rjmp	.+14     	; 0x32a <main+0x92>
					b2_oranje_aan = FALSE;
					PORTB = ALL_LED_PINS;
					doNothingTime = myRandomValue(50,100);
				}
				} else {
				doNothingTime =2000;
 31c:	c0 ed       	ldi	r28, 0xD0	; 208
 31e:	d7 e0       	ldi	r29, 0x07	; 7
 320:	48 c0       	rjmp	.+144    	; 0x3b2 <main+0x11a>
		if (doNothingTime > 0) {
			doNothingTime--;
			} else {
			if (misschien ==  RANDOMNESS || tel_aan > 0 || ( b1_geel_aan > 0  || b2_geel_aan > 0 || b1_oranje_aan > 0 || b2_oranje_aan > 0) ) {
				
				if (tel_aan > 0) {
 322:	11 23       	and	r17, r17
 324:	09 f4       	brne	.+2      	; 0x328 <main+0x90>
 326:	61 c0       	rjmp	.+194    	; 0x3ea <main+0x152>
					tel_aan--;
 328:	11 50       	subi	r17, 0x01	; 1
				}
				if (misschien ==  RANDOMNESS && tel_aan ==0) {
 32a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZL9misschien>
 32e:	8e 31       	cpi	r24, 0x1E	; 30
 330:	19 f4       	brne	.+6      	; 0x338 <main+0xa0>
 332:	11 23       	and	r17, r17
 334:	09 f4       	brne	.+2      	; 0x338 <main+0xa0>
 336:	53 c0       	rjmp	.+166    	; 0x3de <main+0x146>
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 338:	cf d0       	rcall	.+414    	; 0x4d8 <rand>
				}
				if (misschien ==  RANDOMNESS && tel_aan ==0) {
					tel_aan =  myRandomValue(50,50);
				}
				
				uint8_t branders =	myRandomValue(0,4);
 33a:	99 23       	and	r25, r25
 33c:	14 f4       	brge	.+4      	; 0x342 <main+0xaa>
 33e:	81 50       	subi	r24, 0x01	; 1
 340:	90 4e       	sbci	r25, 0xE0	; 224
 342:	c9 2f       	mov	r28, r25
 344:	c5 95       	asr	r28
 346:	c5 95       	asr	r28
 348:	c5 95       	asr	r28
 34a:	c5 95       	asr	r28
 34c:	c5 95       	asr	r28
				
				if (branders == 1 || branders == 3) { // bit 0
 34e:	8c 2f       	mov	r24, r28
 350:	8d 7f       	andi	r24, 0xFD	; 253
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	49 f4       	brne	.+18     	; 0x368 <main+0xd0>
					brander(b1_geel_aan,b1_oranje_aan, b1_reset, PINB1 , PINB0 );
 356:	00 e0       	ldi	r16, 0x00	; 0
 358:	21 e0       	ldi	r18, 0x01	; 1
 35a:	4a e6       	ldi	r20, 0x6A	; 106
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	6b e6       	ldi	r22, 0x6B	; 107
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	8c e6       	ldi	r24, 0x6C	; 108
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0b df       	rcall	.-490    	; 0x17e <_Z7branderRVhS0_S0_cc>
				}
				if (branders == 2 || branders == 3) { // bit 1
 368:	8e ef       	ldi	r24, 0xFE	; 254
 36a:	8c 0f       	add	r24, r28
 36c:	82 30       	cpi	r24, 0x02	; 2
 36e:	48 f4       	brcc	.+18     	; 0x382 <main+0xea>
					brander(b2_geel_aan,b2_oranje_aan, b2_reset, PINB2 , PINB3 );
 370:	03 e0       	ldi	r16, 0x03	; 3
 372:	22 e0       	ldi	r18, 0x02	; 2
 374:	47 e6       	ldi	r20, 0x67	; 103
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	68 e6       	ldi	r22, 0x68	; 104
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	89 e6       	ldi	r24, 0x69	; 105
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	fe de       	rcall	.-516    	; 0x17e <_Z7branderRVhS0_S0_cc>
				}
				if (branders >= 1 && branders <= 3) {
 382:	c1 50       	subi	r28, 0x01	; 1
 384:	c3 30       	cpi	r28, 0x03	; 3
 386:	38 f4       	brcc	.+14     	; 0x396 <main+0xfe>
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 388:	a7 d0       	rcall	.+334    	; 0x4d8 <rand>
 38a:	b6 01       	movw	r22, r12
 38c:	34 d0       	rcall	.+104    	; 0x3f6 <__divmodhi4>
 38e:	eb 01       	movw	r28, r22
 390:	cc 59       	subi	r28, 0x9C	; 156
 392:	df 4f       	sbci	r29, 0xFF	; 255
 394:	0e c0       	rjmp	.+28     	; 0x3b2 <main+0x11a>
					brander(b2_geel_aan,b2_oranje_aan, b2_reset, PINB2 , PINB3 );
				}
				if (branders >= 1 && branders <= 3) {
					doNothingTime = myRandomValue(100,200);
					} else {
					b1_geel_aan = FALSE;
 396:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <b1_geel_aan>
					b2_geel_aan = FALSE;
 39a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <b2_geel_aan>
					b1_oranje_aan = FALSE;
 39e:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <b1_oranje_aan>
					b2_oranje_aan = FALSE;
 3a2:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <b2_oranje_aan>
					PORTB = ALL_LED_PINS;
 3a6:	78 ba       	out	0x18, r7	; 24
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 3a8:	97 d0       	rcall	.+302    	; 0x4d8 <rand>
 3aa:	b5 01       	movw	r22, r10
 3ac:	24 d0       	rcall	.+72     	; 0x3f6 <__divmodhi4>
 3ae:	eb 01       	movw	r28, r22
 3b0:	e2 96       	adiw	r28, 0x32	; 50
				} else {
				doNothingTime =2000;
			}
			
			
			if (lastCmdCount == 0) {
 3b2:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <_ZL12lastCmdCount>
 3b6:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <_ZL12lastCmdCount+0x1>
 3ba:	89 2b       	or	r24, r25
 3bc:	31 f4       	brne	.+12     	; 0x3ca <main+0x132>
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 3be:	8c d0       	rcall	.+280    	; 0x4d8 <rand>
				doNothingTime =2000;
			}
			
			
			if (lastCmdCount == 0) {
				misschien =  myRandomValue(0,254); //rand() / (RAND_MAX / 254 + 1) ;
 3c0:	b7 01       	movw	r22, r14
 3c2:	19 d0       	rcall	.+50     	; 0x3f6 <__divmodhi4>
 3c4:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <_ZL9misschien>
 3c8:	8f cf       	rjmp	.-226    	; 0x2e8 <main+0x50>
			} else {
				--lastCmdCount;
 3ca:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <_ZL12lastCmdCount>
 3ce:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <_ZL12lastCmdCount+0x1>
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <_ZL12lastCmdCount+0x1>
 3d8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <_ZL12lastCmdCount>
 3dc:	85 cf       	rjmp	.-246    	; 0x2e8 <main+0x50>
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 3de:	7c d0       	rcall	.+248    	; 0x4d8 <rand>
				
				if (tel_aan > 0) {
					tel_aan--;
				}
				if (misschien ==  RANDOMNESS && tel_aan ==0) {
					tel_aan =  myRandomValue(50,50);
 3e0:	b4 01       	movw	r22, r8
 3e2:	09 d0       	rcall	.+18     	; 0x3f6 <__divmodhi4>
 3e4:	12 e3       	ldi	r17, 0x32	; 50
 3e6:	16 0f       	add	r17, r22
 3e8:	a7 cf       	rjmp	.-178    	; 0x338 <main+0xa0>
			if (misschien ==  RANDOMNESS || tel_aan > 0 || ( b1_geel_aan > 0  || b2_geel_aan > 0 || b1_oranje_aan > 0 || b2_oranje_aan > 0) ) {
				
				if (tel_aan > 0) {
					tel_aan--;
				}
				if (misschien ==  RANDOMNESS && tel_aan ==0) {
 3ea:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZL9misschien>
 3ee:	8e 31       	cpi	r24, 0x1E	; 30
 3f0:	b1 f3       	breq	.-20     	; 0x3de <main+0x146>
 3f2:	10 e0       	ldi	r17, 0x00	; 0
 3f4:	a1 cf       	rjmp	.-190    	; 0x338 <main+0xa0>

000003f6 <__divmodhi4>:
 3f6:	97 fb       	bst	r25, 7
 3f8:	07 2e       	mov	r0, r23
 3fa:	16 f4       	brtc	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fc:	00 94       	com	r0
 3fe:	06 d0       	rcall	.+12     	; 0x40c <__divmodhi4_neg1>
 400:	77 fd       	sbrc	r23, 7
 402:	08 d0       	rcall	.+16     	; 0x414 <__divmodhi4_neg2>
 404:	0b d0       	rcall	.+22     	; 0x41c <__udivmodhi4>
 406:	07 fc       	sbrc	r0, 7
 408:	05 d0       	rcall	.+10     	; 0x414 <__divmodhi4_neg2>
 40a:	3e f4       	brtc	.+14     	; 0x41a <__divmodhi4_exit>

0000040c <__divmodhi4_neg1>:
 40c:	90 95       	com	r25
 40e:	81 95       	neg	r24
 410:	9f 4f       	sbci	r25, 0xFF	; 255
 412:	08 95       	ret

00000414 <__divmodhi4_neg2>:
 414:	70 95       	com	r23
 416:	61 95       	neg	r22
 418:	7f 4f       	sbci	r23, 0xFF	; 255

0000041a <__divmodhi4_exit>:
 41a:	08 95       	ret

0000041c <__udivmodhi4>:
 41c:	aa 1b       	sub	r26, r26
 41e:	bb 1b       	sub	r27, r27
 420:	51 e1       	ldi	r21, 0x11	; 17
 422:	07 c0       	rjmp	.+14     	; 0x432 <__udivmodhi4_ep>

00000424 <__udivmodhi4_loop>:
 424:	aa 1f       	adc	r26, r26
 426:	bb 1f       	adc	r27, r27
 428:	a6 17       	cp	r26, r22
 42a:	b7 07       	cpc	r27, r23
 42c:	10 f0       	brcs	.+4      	; 0x432 <__udivmodhi4_ep>
 42e:	a6 1b       	sub	r26, r22
 430:	b7 0b       	sbc	r27, r23

00000432 <__udivmodhi4_ep>:
 432:	88 1f       	adc	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	5a 95       	dec	r21
 438:	a9 f7       	brne	.-22     	; 0x424 <__udivmodhi4_loop>
 43a:	80 95       	com	r24
 43c:	90 95       	com	r25
 43e:	bc 01       	movw	r22, r24
 440:	cd 01       	movw	r24, r26
 442:	08 95       	ret

00000444 <do_rand>:
 444:	8f 92       	push	r8
 446:	9f 92       	push	r9
 448:	af 92       	push	r10
 44a:	bf 92       	push	r11
 44c:	cf 92       	push	r12
 44e:	df 92       	push	r13
 450:	ef 92       	push	r14
 452:	ff 92       	push	r15
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	ec 01       	movw	r28, r24
 45a:	68 81       	ld	r22, Y
 45c:	79 81       	ldd	r23, Y+1	; 0x01
 45e:	8a 81       	ldd	r24, Y+2	; 0x02
 460:	9b 81       	ldd	r25, Y+3	; 0x03
 462:	61 15       	cp	r22, r1
 464:	71 05       	cpc	r23, r1
 466:	81 05       	cpc	r24, r1
 468:	91 05       	cpc	r25, r1
 46a:	21 f4       	brne	.+8      	; 0x474 <do_rand+0x30>
 46c:	64 e2       	ldi	r22, 0x24	; 36
 46e:	79 ed       	ldi	r23, 0xD9	; 217
 470:	8b e5       	ldi	r24, 0x5B	; 91
 472:	97 e0       	ldi	r25, 0x07	; 7
 474:	2d e1       	ldi	r18, 0x1D	; 29
 476:	33 ef       	ldi	r19, 0xF3	; 243
 478:	41 e0       	ldi	r20, 0x01	; 1
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	82 d0       	rcall	.+260    	; 0x582 <__divmodsi4>
 47e:	49 01       	movw	r8, r18
 480:	5a 01       	movw	r10, r20
 482:	27 ea       	ldi	r18, 0xA7	; 167
 484:	31 e4       	ldi	r19, 0x41	; 65
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	50 e0       	ldi	r21, 0x00	; 0
 48a:	62 d0       	rcall	.+196    	; 0x550 <__mulsi3>
 48c:	6b 01       	movw	r12, r22
 48e:	7c 01       	movw	r14, r24
 490:	2c ee       	ldi	r18, 0xEC	; 236
 492:	34 ef       	ldi	r19, 0xF4	; 244
 494:	4f ef       	ldi	r20, 0xFF	; 255
 496:	5f ef       	ldi	r21, 0xFF	; 255
 498:	c5 01       	movw	r24, r10
 49a:	b4 01       	movw	r22, r8
 49c:	59 d0       	rcall	.+178    	; 0x550 <__mulsi3>
 49e:	dc 01       	movw	r26, r24
 4a0:	cb 01       	movw	r24, r22
 4a2:	8c 0d       	add	r24, r12
 4a4:	9d 1d       	adc	r25, r13
 4a6:	ae 1d       	adc	r26, r14
 4a8:	bf 1d       	adc	r27, r15
 4aa:	b7 ff       	sbrs	r27, 7
 4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <do_rand+0x70>
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	a1 09       	sbc	r26, r1
 4b2:	b0 48       	sbci	r27, 0x80	; 128
 4b4:	88 83       	st	Y, r24
 4b6:	99 83       	std	Y+1, r25	; 0x01
 4b8:	aa 83       	std	Y+2, r26	; 0x02
 4ba:	bb 83       	std	Y+3, r27	; 0x03
 4bc:	9f 77       	andi	r25, 0x7F	; 127
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	ff 90       	pop	r15
 4c4:	ef 90       	pop	r14
 4c6:	df 90       	pop	r13
 4c8:	cf 90       	pop	r12
 4ca:	bf 90       	pop	r11
 4cc:	af 90       	pop	r10
 4ce:	9f 90       	pop	r9
 4d0:	8f 90       	pop	r8
 4d2:	08 95       	ret

000004d4 <rand_r>:
 4d4:	b7 df       	rcall	.-146    	; 0x444 <do_rand>
 4d6:	08 95       	ret

000004d8 <rand>:
 4d8:	80 e6       	ldi	r24, 0x60	; 96
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	b3 df       	rcall	.-154    	; 0x444 <do_rand>
 4de:	08 95       	ret

000004e0 <srand>:
 4e0:	a0 e0       	ldi	r26, 0x00	; 0
 4e2:	b0 e0       	ldi	r27, 0x00	; 0
 4e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 4e8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 4ec:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
 4f0:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
 4f4:	08 95       	ret

000004f6 <eeprom_read_byte>:
 4f6:	e1 99       	sbic	0x1c, 1	; 28
 4f8:	fe cf       	rjmp	.-4      	; 0x4f6 <eeprom_read_byte>
 4fa:	8e bb       	out	0x1e, r24	; 30
 4fc:	e0 9a       	sbi	0x1c, 0	; 28
 4fe:	99 27       	eor	r25, r25
 500:	8d b3       	in	r24, 0x1d	; 29
 502:	08 95       	ret

00000504 <eeprom_read_dword>:
 504:	a6 e1       	ldi	r26, 0x16	; 22
 506:	44 e0       	ldi	r20, 0x04	; 4
 508:	0a c0       	rjmp	.+20     	; 0x51e <eeprom_read_blraw>

0000050a <eeprom_write_dword>:
 50a:	24 2f       	mov	r18, r20
 50c:	15 d0       	rcall	.+42     	; 0x538 <eeprom_write_r18>
 50e:	25 2f       	mov	r18, r21
 510:	13 d0       	rcall	.+38     	; 0x538 <eeprom_write_r18>
 512:	00 c0       	rjmp	.+0      	; 0x514 <eeprom_write_word>

00000514 <eeprom_write_word>:
 514:	10 d0       	rcall	.+32     	; 0x536 <eeprom_write_byte>
 516:	27 2f       	mov	r18, r23
 518:	0f c0       	rjmp	.+30     	; 0x538 <eeprom_write_r18>

0000051a <eeprom_read_block>:
 51a:	a8 2f       	mov	r26, r24
 51c:	86 2f       	mov	r24, r22

0000051e <eeprom_read_blraw>:
 51e:	e8 2f       	mov	r30, r24
 520:	e1 99       	sbic	0x1c, 1	; 28
 522:	fe cf       	rjmp	.-4      	; 0x520 <eeprom_read_blraw+0x2>
 524:	05 c0       	rjmp	.+10     	; 0x530 <eeprom_read_blraw+0x12>
 526:	ee bb       	out	0x1e, r30	; 30
 528:	e0 9a       	sbi	0x1c, 0	; 28
 52a:	e3 95       	inc	r30
 52c:	0d b2       	in	r0, 0x1d	; 29
 52e:	0d 92       	st	X+, r0
 530:	41 50       	subi	r20, 0x01	; 1
 532:	c8 f7       	brcc	.-14     	; 0x526 <eeprom_read_blraw+0x8>
 534:	08 95       	ret

00000536 <eeprom_write_byte>:
 536:	26 2f       	mov	r18, r22

00000538 <eeprom_write_r18>:
 538:	e1 99       	sbic	0x1c, 1	; 28
 53a:	fe cf       	rjmp	.-4      	; 0x538 <eeprom_write_r18>
 53c:	1c ba       	out	0x1c, r1	; 28
 53e:	8e bb       	out	0x1e, r24	; 30
 540:	2d bb       	out	0x1d, r18	; 29
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	f8 94       	cli
 546:	e2 9a       	sbi	0x1c, 2	; 28
 548:	e1 9a       	sbi	0x1c, 1	; 28
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	01 96       	adiw	r24, 0x01	; 1
 54e:	08 95       	ret

00000550 <__mulsi3>:
 550:	ee 27       	eor	r30, r30
 552:	ff 27       	eor	r31, r31

00000554 <__mulsi3_helper>:
 554:	aa 27       	eor	r26, r26
 556:	bb 27       	eor	r27, r27
 558:	08 c0       	rjmp	.+16     	; 0x56a <__mulsi3_helper+0x16>
 55a:	a2 0f       	add	r26, r18
 55c:	b3 1f       	adc	r27, r19
 55e:	e4 1f       	adc	r30, r20
 560:	f5 1f       	adc	r31, r21
 562:	22 0f       	add	r18, r18
 564:	33 1f       	adc	r19, r19
 566:	44 1f       	adc	r20, r20
 568:	55 1f       	adc	r21, r21
 56a:	96 95       	lsr	r25
 56c:	87 95       	ror	r24
 56e:	77 95       	ror	r23
 570:	67 95       	ror	r22
 572:	98 f3       	brcs	.-26     	; 0x55a <__mulsi3_helper+0x6>
 574:	70 40       	sbci	r23, 0x00	; 0
 576:	a9 f7       	brne	.-22     	; 0x562 <__mulsi3_helper+0xe>
 578:	00 97       	sbiw	r24, 0x00	; 0
 57a:	99 f7       	brne	.-26     	; 0x562 <__mulsi3_helper+0xe>
 57c:	bd 01       	movw	r22, r26
 57e:	cf 01       	movw	r24, r30
 580:	08 95       	ret

00000582 <__divmodsi4>:
 582:	05 2e       	mov	r0, r21
 584:	97 fb       	bst	r25, 7
 586:	16 f4       	brtc	.+4      	; 0x58c <__divmodsi4+0xa>
 588:	00 94       	com	r0
 58a:	0f d0       	rcall	.+30     	; 0x5aa <__negsi2>
 58c:	57 fd       	sbrc	r21, 7
 58e:	05 d0       	rcall	.+10     	; 0x59a <__divmodsi4_neg2>
 590:	14 d0       	rcall	.+40     	; 0x5ba <__udivmodsi4>
 592:	07 fc       	sbrc	r0, 7
 594:	02 d0       	rcall	.+4      	; 0x59a <__divmodsi4_neg2>
 596:	46 f4       	brtc	.+16     	; 0x5a8 <__divmodsi4_exit>
 598:	08 c0       	rjmp	.+16     	; 0x5aa <__negsi2>

0000059a <__divmodsi4_neg2>:
 59a:	50 95       	com	r21
 59c:	40 95       	com	r20
 59e:	30 95       	com	r19
 5a0:	21 95       	neg	r18
 5a2:	3f 4f       	sbci	r19, 0xFF	; 255
 5a4:	4f 4f       	sbci	r20, 0xFF	; 255
 5a6:	5f 4f       	sbci	r21, 0xFF	; 255

000005a8 <__divmodsi4_exit>:
 5a8:	08 95       	ret

000005aa <__negsi2>:
 5aa:	90 95       	com	r25
 5ac:	80 95       	com	r24
 5ae:	70 95       	com	r23
 5b0:	61 95       	neg	r22
 5b2:	7f 4f       	sbci	r23, 0xFF	; 255
 5b4:	8f 4f       	sbci	r24, 0xFF	; 255
 5b6:	9f 4f       	sbci	r25, 0xFF	; 255
 5b8:	08 95       	ret

000005ba <__udivmodsi4>:
 5ba:	a1 e2       	ldi	r26, 0x21	; 33
 5bc:	1a 2e       	mov	r1, r26
 5be:	aa 1b       	sub	r26, r26
 5c0:	bb 1b       	sub	r27, r27
 5c2:	fd 01       	movw	r30, r26
 5c4:	0d c0       	rjmp	.+26     	; 0x5e0 <__udivmodsi4_ep>

000005c6 <__udivmodsi4_loop>:
 5c6:	aa 1f       	adc	r26, r26
 5c8:	bb 1f       	adc	r27, r27
 5ca:	ee 1f       	adc	r30, r30
 5cc:	ff 1f       	adc	r31, r31
 5ce:	a2 17       	cp	r26, r18
 5d0:	b3 07       	cpc	r27, r19
 5d2:	e4 07       	cpc	r30, r20
 5d4:	f5 07       	cpc	r31, r21
 5d6:	20 f0       	brcs	.+8      	; 0x5e0 <__udivmodsi4_ep>
 5d8:	a2 1b       	sub	r26, r18
 5da:	b3 0b       	sbc	r27, r19
 5dc:	e4 0b       	sbc	r30, r20
 5de:	f5 0b       	sbc	r31, r21

000005e0 <__udivmodsi4_ep>:
 5e0:	66 1f       	adc	r22, r22
 5e2:	77 1f       	adc	r23, r23
 5e4:	88 1f       	adc	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	1a 94       	dec	r1
 5ea:	69 f7       	brne	.-38     	; 0x5c6 <__udivmodsi4_loop>
 5ec:	60 95       	com	r22
 5ee:	70 95       	com	r23
 5f0:	80 95       	com	r24
 5f2:	90 95       	com	r25
 5f4:	9b 01       	movw	r18, r22
 5f6:	ac 01       	movw	r20, r24
 5f8:	bd 01       	movw	r22, r26
 5fa:	cf 01       	movw	r24, r30
 5fc:	08 95       	ret

000005fe <_exit>:
 5fe:	f8 94       	cli

00000600 <__stop_program>:
 600:	ff cf       	rjmp	.-2      	; 0x600 <__stop_program>
