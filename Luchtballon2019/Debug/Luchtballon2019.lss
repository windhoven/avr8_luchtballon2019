
Luchtballon2019.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000604  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000604  000006b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800066  00800066  000006be  2**0
                  ALLOC
  3 .eeprom       00000005  00810000  00810000  000006be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000006c3  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  00000738  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000ebc  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000068c  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000857  00000000  00000000  00001da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000120  00000000  00000000  000025f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000536  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000550  00000000  00000000  00002c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a8  00000000  00000000  0000319e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	94 c0       	rjmp	.+296    	; 0x138 <__vector_7>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e4 e0       	ldi	r30, 0x04	; 4
  36:	f6 e0       	ldi	r31, 0x06	; 6
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a6 36       	cpi	r26, 0x66	; 102
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a6 e6       	ldi	r26, 0x66	; 102
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	ad 37       	cpi	r26, 0x7D	; 125
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	22 d1       	rcall	.+580    	; 0x29a <main>
  56:	d4 c2       	rjmp	.+1448   	; 0x600 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <_Z10USART_Initv>:
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
}
  5a:	12 b8       	out	0x02, r1	; 2
  5c:	85 e0       	ldi	r24, 0x05	; 5
  5e:	89 b9       	out	0x09, r24	; 9
  60:	80 e9       	ldi	r24, 0x90	; 144
  62:	8a b9       	out	0x0a, r24	; 10
  64:	86 e0       	ldi	r24, 0x06	; 6
  66:	83 b9       	out	0x03, r24	; 3
  68:	08 95       	ret

0000006a <_Z11resetBufferv>:
  6a:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <_ZL9rx_buffer>
  6e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <_ZL10data_count>
  72:	08 95       	ret

00000074 <_Z14processCommandv>:
  74:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <_ZL13command_ready>
  78:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <_ZL10command_in+0x1>
  7c:	88 23       	and	r24, r24
  7e:	24 f4       	brge	.+8      	; 0x88 <_Z14processCommandv+0x14>
  80:	8e e1       	ldi	r24, 0x1E	; 30
  82:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <misschien>
  86:	0c c0       	rjmp	.+24     	; 0xa0 <_Z14processCommandv+0x2c>
  88:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <misschien>
  8c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <b1_geel_aan>
  90:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <b2_geel_aan>
  94:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <b1_oranje_aan>
  98:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <b2_oranje_aan>
  9c:	8f e0       	ldi	r24, 0x0F	; 15
  9e:	88 bb       	out	0x18, r24	; 24
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ignore>
  a6:	08 95       	ret

000000a8 <_Z15putCharToBufferh>:
  a8:	cf 93       	push	r28
  aa:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <_ZL13command_ready>
  ae:	91 30       	cpi	r25, 0x01	; 1
  b0:	09 f4       	brne	.+2      	; 0xb4 <_Z15putCharToBufferh+0xc>
  b2:	40 c0       	rjmp	.+128    	; 0x134 <__stack+0x55>
  b4:	c8 2f       	mov	r28, r24
  b6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <_ZL10data_count>
  ba:	86 30       	cpi	r24, 0x06	; 6
  bc:	20 f0       	brcs	.+8      	; 0xc6 <_Z15putCharToBufferh+0x1e>
  be:	d5 df       	rcall	.-86     	; 0x6a <_Z11resetBufferv>
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ignore>
  c6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <_ZL10data_count>
  ca:	81 11       	cpse	r24, r1
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <_Z15putCharToBufferh+0x2e>
  ce:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  d2:	8c 17       	cp	r24, r28
  d4:	61 f1       	breq	.+88     	; 0x12e <__stack+0x4f>
  d6:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <_ZL10data_count>
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	8e 0f       	add	r24, r30
  de:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <_ZL10data_count>
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	e9 58       	subi	r30, 0x89	; 137
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	c0 83       	st	Z, r28
  ea:	ca 30       	cpi	r28, 0x0A	; 10
  ec:	19 f5       	brne	.+70     	; 0x134 <__stack+0x55>
  ee:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <ignore>
  f2:	81 11       	cpse	r24, r1
  f4:	11 c0       	rjmp	.+34     	; 0x118 <__stack+0x39>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <_ZL13command_ready>
  fc:	e1 e7       	ldi	r30, 0x71	; 113
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	dc 01       	movw	r26, r24
 106:	a9 58       	subi	r26, 0x89	; 137
 108:	bf 4f       	sbci	r27, 0xFF	; 255
 10a:	2c 91       	ld	r18, X
 10c:	21 93       	st	Z+, r18
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	86 30       	cpi	r24, 0x06	; 6
 112:	91 05       	cpc	r25, r1
 114:	b9 f7       	brne	.-18     	; 0x104 <__stack+0x25>
 116:	ae df       	rcall	.-164    	; 0x74 <_Z14processCommandv>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ignore>
 11e:	a5 df       	rcall	.-182    	; 0x6a <_Z11resetBufferv>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e2       	ldi	r25, 0x20	; 32
 124:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <lastCmdCount+0x1>
 128:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <lastCmdCount>
 12c:	03 c0       	rjmp	.+6      	; 0x134 <__stack+0x55>
 12e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <ignore>
 132:	d1 cf       	rjmp	.-94     	; 0xd6 <_Z15putCharToBufferh+0x2e>
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <__vector_7>:
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
 15a:	8c b1       	in	r24, 0x0c	; 12
 15c:	a5 df       	rcall	.-182    	; 0xa8 <_Z15putCharToBufferh>
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	bf 91       	pop	r27
 164:	af 91       	pop	r26
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	7f 91       	pop	r23
 16c:	6f 91       	pop	r22
 16e:	5f 91       	pop	r21
 170:	4f 91       	pop	r20
 172:	3f 91       	pop	r19
 174:	2f 91       	pop	r18
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <_Z7branderRVhS0_S0_cc>:

void brander(volatile uint8_t& b_geel_aan,volatile uint8_t& b_oranje_aan,volatile uint8_t& b_reset, char pin_geel /* 1 */, char pin_oranje /* 0 */) {
 180:	ef 92       	push	r14
 182:	ff 92       	push	r15
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	ec 01       	movw	r28, r24
 18e:	7b 01       	movw	r14, r22
 190:	12 2f       	mov	r17, r18
	if (b_geel_aan == TRUE) {
 192:	88 81       	ld	r24, Y
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	11 f5       	brne	.+68     	; 0x1dc <_Z7branderRVhS0_S0_cc+0x5c>
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 198:	a0 d1       	rcall	.+832    	; 0x4da <rand>
}

void brander(volatile uint8_t& b_geel_aan,volatile uint8_t& b_oranje_aan,volatile uint8_t& b_reset, char pin_geel /* 1 */, char pin_oranje /* 0 */) {
	if (b_geel_aan == TRUE) {
		if (myRandomValue(0,B_ORANJE) ==0) {
 19a:	6b ea       	ldi	r22, 0xAB	; 171
 19c:	7a e2       	ldi	r23, 0x2A	; 42
 19e:	2c d1       	rcall	.+600    	; 0x3f8 <__divmodhi4>
 1a0:	67 2b       	or	r22, r23
 1a2:	79 f4       	brne	.+30     	; 0x1c2 <_Z7branderRVhS0_S0_cc+0x42>
			PORTB &= ~(1 << pin_geel); // High
 1a4:	28 b3       	in	r18, 0x18	; 24
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <_Z7branderRVhS0_S0_cc+0x30>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	1a 95       	dec	r17
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <_Z7branderRVhS0_S0_cc+0x2c>
 1b4:	80 95       	com	r24
 1b6:	82 23       	and	r24, r18
 1b8:	88 bb       	out	0x18, r24	; 24
			b_oranje_aan = TRUE;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	f7 01       	movw	r30, r14
 1be:	80 83       	st	Z, r24
 1c0:	26 c0       	rjmp	.+76     	; 0x20e <_Z7branderRVhS0_S0_cc+0x8e>
		} else {
			PORTB  |= (1 << pin_geel);  // Low
 1c2:	28 b3       	in	r18, 0x18	; 24
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <_Z7branderRVhS0_S0_cc+0x4e>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	1a 95       	dec	r17
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <_Z7branderRVhS0_S0_cc+0x4a>
 1d2:	82 2b       	or	r24, r18
 1d4:	88 bb       	out	0x18, r24	; 24
			b_oranje_aan = FALSE;
 1d6:	f7 01       	movw	r30, r14
 1d8:	10 82       	st	Z, r1
 1da:	19 c0       	rjmp	.+50     	; 0x20e <_Z7branderRVhS0_S0_cc+0x8e>
		}
	} else {
		if (b_oranje_aan == TRUE) {
 1dc:	fb 01       	movw	r30, r22
 1de:	80 81       	ld	r24, Z
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	a9 f4       	brne	.+42     	; 0x20e <_Z7branderRVhS0_S0_cc+0x8e>
			b_reset+=1;
 1e4:	fa 01       	movw	r30, r20
 1e6:	80 81       	ld	r24, Z
 1e8:	8f 5f       	subi	r24, 0xFF	; 255
 1ea:	80 83       	st	Z, r24
			
			if (b_reset >=5)
 1ec:	80 81       	ld	r24, Z
 1ee:	85 30       	cpi	r24, 0x05	; 5
 1f0:	70 f0       	brcs	.+28     	; 0x20e <_Z7branderRVhS0_S0_cc+0x8e>
			{
				PORTB |= (1 << pin_geel);  // Low
 1f2:	28 b3       	in	r18, 0x18	; 24
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <_Z7branderRVhS0_S0_cc+0x7e>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	1a 95       	dec	r17
 200:	e2 f7       	brpl	.-8      	; 0x1fa <_Z7branderRVhS0_S0_cc+0x7a>
 202:	82 2b       	or	r24, r18
 204:	88 bb       	out	0x18, r24	; 24
				b_oranje_aan = FALSE;
 206:	fb 01       	movw	r30, r22
 208:	10 82       	st	Z, r1
				
				b_reset = 0;
 20a:	fa 01       	movw	r30, r20
 20c:	10 82       	st	Z, r1
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 20e:	65 d1       	rcall	.+714    	; 0x4da <rand>
				b_reset = 0;
			}
		}
	}
	
	if (myRandomValue(0,B_GEEL) ==0) { 
 210:	81 15       	cp	r24, r1
 212:	90 48       	sbci	r25, 0x80	; 128
 214:	01 f1       	breq	.+64     	; 0x256 <_Z7branderRVhS0_S0_cc+0xd6>
		if (b_geel_aan == FALSE) {
 216:	88 81       	ld	r24, Y
 218:	81 11       	cpse	r24, r1
 21a:	0e c0       	rjmp	.+28     	; 0x238 <_Z7branderRVhS0_S0_cc+0xb8>
			PORTB &= ~(1 << pin_oranje);
 21c:	28 b3       	in	r18, 0x18	; 24
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <_Z7branderRVhS0_S0_cc+0xa8>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	0a 95       	dec	r16
 22a:	e2 f7       	brpl	.-8      	; 0x224 <_Z7branderRVhS0_S0_cc+0xa4>
 22c:	80 95       	com	r24
 22e:	82 23       	and	r24, r18
 230:	88 bb       	out	0x18, r24	; 24
			b_geel_aan = TRUE;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	88 83       	st	Y, r24
 236:	0f c0       	rjmp	.+30     	; 0x256 <_Z7branderRVhS0_S0_cc+0xd6>
		} else {
			if (b_oranje_aan == FALSE) {
 238:	f7 01       	movw	r30, r14
 23a:	80 81       	ld	r24, Z
 23c:	81 11       	cpse	r24, r1
 23e:	0b c0       	rjmp	.+22     	; 0x256 <_Z7branderRVhS0_S0_cc+0xd6>
				PORTB |= (1 << pin_oranje);
 240:	28 b3       	in	r18, 0x18	; 24
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <_Z7branderRVhS0_S0_cc+0xcc>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	0a 95       	dec	r16
 24e:	e2 f7       	brpl	.-8      	; 0x248 <_Z7branderRVhS0_S0_cc+0xc8>
 250:	82 2b       	or	r24, r18
 252:	88 bb       	out	0x18, r24	; 24
				b_geel_aan = FALSE;
 254:	18 82       	st	Y, r1
			}
		}
	}
}
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	ff 90       	pop	r15
 260:	ef 90       	pop	r14
 262:	08 95       	ret

00000264 <_Z8initrandv>:
void initrand()
{
        uint32_t state;
        static uint32_t EEMEM sstate = 1;

        state = eeprom_read_dword(&sstate);
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	4e d1       	rcall	.+668    	; 0x506 <eeprom_read_dword>

        // Check if it's unwritten EEPROM (first time). Use something funny in that case.
        if (state == 0xffffffUL)
 26a:	6f 3f       	cpi	r22, 0xFF	; 255
 26c:	2f ef       	ldi	r18, 0xFF	; 255
 26e:	72 07       	cpc	r23, r18
 270:	82 07       	cpc	r24, r18
 272:	91 05       	cpc	r25, r1
 274:	21 f4       	brne	.+8      	; 0x27e <_Z8initrandv+0x1a>
                state = 0xDEADBEEFUL;
 276:	6f ee       	ldi	r22, 0xEF	; 239
 278:	7e eb       	ldi	r23, 0xBE	; 190
 27a:	8d ea       	ldi	r24, 0xAD	; 173
 27c:	9e ed       	ldi	r25, 0xDE	; 222
        srand(state);
 27e:	cb 01       	movw	r24, r22
 280:	30 d1       	rcall	.+608    	; 0x4e2 <srand>
		
		state = !state;
        eeprom_write_dword(&sstate,rand());
 282:	2b d1       	rcall	.+598    	; 0x4da <rand>
 284:	ac 01       	movw	r20, r24
 286:	99 0f       	add	r25, r25
 288:	66 0b       	sbc	r22, r22
 28a:	77 0b       	sbc	r23, r23
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	3d d1       	rcall	.+634    	; 0x50c <eeprom_write_dword>
		 
		 misschien = RANDOMNESS;
 292:	8e e1       	ldi	r24, 0x1E	; 30
 294:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <misschien>
 298:	08 95       	ret

0000029a <main>:

int main(void)
{		
	//DDRB  = 0x0F; // set PORTB for output = 0xff
	//PORTB  = 0x0F; // 0x00 = OFF all LEDs initially
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2) | (1<<DDB3) ; // = outputs voor branders
 29a:	8f e0       	ldi	r24, 0x0F	; 15
 29c:	87 bb       	out	0x17, r24	; 23
	PORTB  = ALL_LED_PINS;
 29e:	88 bb       	out	0x18, r24	; 24
	
	USART_Init();
 2a0:	dc de       	rcall	.-584    	; 0x5a <_Z10USART_Initv>
	
	eAddress = eeprom_read_byte(&deviceConfig);
 2a2:	84 e0       	ldi	r24, 0x04	; 4
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	28 d1       	rcall	.+592    	; 0x4f8 <eeprom_read_byte>
 2a8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>

	
	sei();
 2ac:	78 94       	sei

	initrand();
 2ae:	da df       	rcall	.-76     	; 0x264 <_Z8initrandv>
	
	uint16_t doNothingTime = 0;
	uint8_t tel_aan =0;
 2b0:	10 e0       	ldi	r17, 0x00	; 0
	
	sei();

	initrand();
	
	uint16_t doNothingTime = 0;
 2b2:	c0 e0       	ldi	r28, 0x00	; 0
 2b4:	d0 e0       	ldi	r29, 0x00	; 0
				
				if (tel_aan > 0) {
					tel_aan--;
				}
				if (misschien ==  RANDOMNESS && tel_aan ==0) {
					tel_aan =  myRandomValue(50,50);
 2b6:	0f 2e       	mov	r0, r31
 2b8:	f0 e9       	ldi	r31, 0x90	; 144
 2ba:	8f 2e       	mov	r8, r31
 2bc:	f2 e0       	ldi	r31, 0x02	; 2
 2be:	9f 2e       	mov	r9, r31
 2c0:	f0 2d       	mov	r31, r0
				doNothingTime =2000;
			}
			
			
			if (lastCmdCount == 0) {
				misschien =  myRandomValue(0,254); //rand() / (RAND_MAX / 254 + 1) ;
 2c2:	0f 2e       	mov	r0, r31
 2c4:	f2 e8       	ldi	r31, 0x82	; 130
 2c6:	ef 2e       	mov	r14, r31
 2c8:	f1 2c       	mov	r15, r1
 2ca:	f0 2d       	mov	r31, r0
					} else {
					b1_geel_aan = FALSE;
					b2_geel_aan = FALSE;
					b1_oranje_aan = FALSE;
					b2_oranje_aan = FALSE;
					PORTB = ALL_LED_PINS;
 2cc:	0f 2e       	mov	r0, r31
 2ce:	ff e0       	ldi	r31, 0x0F	; 15
 2d0:	7f 2e       	mov	r7, r31
 2d2:	f0 2d       	mov	r31, r0
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 2d4:	0f 2e       	mov	r0, r31
 2d6:	f8 e4       	ldi	r31, 0x48	; 72
 2d8:	af 2e       	mov	r10, r31
 2da:	bb 24       	eor	r11, r11
 2dc:	b3 94       	inc	r11
 2de:	f0 2d       	mov	r31, r0
 2e0:	0f 2e       	mov	r0, r31
 2e2:	f4 ea       	ldi	r31, 0xA4	; 164
 2e4:	cf 2e       	mov	r12, r31
 2e6:	d1 2c       	mov	r13, r1
 2e8:	f0 2d       	mov	r31, r0
	uint8_t tel_aan =0;
	while(1)
	{

		//TODO:: Please write your application code
		if (doNothingTime > 0) {
 2ea:	20 97       	sbiw	r28, 0x00	; 0
 2ec:	11 f0       	breq	.+4      	; 0x2f2 <main+0x58>
			doNothingTime--;
 2ee:	21 97       	sbiw	r28, 0x01	; 1
 2f0:	fc cf       	rjmp	.-8      	; 0x2ea <main+0x50>
		} else {
			if (misschien ==  RANDOMNESS || tel_aan > 0 || ( b1_geel_aan > 0  || b2_geel_aan > 0 || b1_oranje_aan > 0 || b2_oranje_aan > 0) ) {
 2f2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <misschien>
 2f6:	8e 31       	cpi	r24, 0x1E	; 30
 2f8:	a9 f0       	breq	.+42     	; 0x324 <main+0x8a>
 2fa:	11 11       	cpse	r17, r1
 2fc:	16 c0       	rjmp	.+44     	; 0x32a <main+0x90>
 2fe:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <b1_geel_aan>
 302:	81 11       	cpse	r24, r1
 304:	73 c0       	rjmp	.+230    	; 0x3ec <main+0x152>
 306:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <b2_geel_aan>
 30a:	81 11       	cpse	r24, r1
 30c:	6f c0       	rjmp	.+222    	; 0x3ec <main+0x152>
 30e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <b1_oranje_aan>
 312:	81 11       	cpse	r24, r1
 314:	6b c0       	rjmp	.+214    	; 0x3ec <main+0x152>
 316:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <b2_oranje_aan>
 31a:	81 11       	cpse	r24, r1
 31c:	07 c0       	rjmp	.+14     	; 0x32c <main+0x92>
					b2_oranje_aan = FALSE;
					PORTB = ALL_LED_PINS;
					doNothingTime = myRandomValue(50,100);
				}
				} else {
				doNothingTime =2000;
 31e:	c0 ed       	ldi	r28, 0xD0	; 208
 320:	d7 e0       	ldi	r29, 0x07	; 7
 322:	48 c0       	rjmp	.+144    	; 0x3b4 <main+0x11a>
		if (doNothingTime > 0) {
			doNothingTime--;
		} else {
			if (misschien ==  RANDOMNESS || tel_aan > 0 || ( b1_geel_aan > 0  || b2_geel_aan > 0 || b1_oranje_aan > 0 || b2_oranje_aan > 0) ) {
				
				if (tel_aan > 0) {
 324:	11 23       	and	r17, r17
 326:	09 f4       	brne	.+2      	; 0x32a <main+0x90>
 328:	61 c0       	rjmp	.+194    	; 0x3ec <main+0x152>
					tel_aan--;
 32a:	11 50       	subi	r17, 0x01	; 1
				}
				if (misschien ==  RANDOMNESS && tel_aan ==0) {
 32c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <misschien>
 330:	8e 31       	cpi	r24, 0x1E	; 30
 332:	19 f4       	brne	.+6      	; 0x33a <main+0xa0>
 334:	11 23       	and	r17, r17
 336:	09 f4       	brne	.+2      	; 0x33a <main+0xa0>
 338:	53 c0       	rjmp	.+166    	; 0x3e0 <main+0x146>
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 33a:	cf d0       	rcall	.+414    	; 0x4da <rand>
				}
				if (misschien ==  RANDOMNESS && tel_aan ==0) {
					tel_aan =  myRandomValue(50,50);
				}
				
				uint8_t branders =	myRandomValue(0,4);
 33c:	99 23       	and	r25, r25
 33e:	14 f4       	brge	.+4      	; 0x344 <main+0xaa>
 340:	81 50       	subi	r24, 0x01	; 1
 342:	90 4e       	sbci	r25, 0xE0	; 224
 344:	c9 2f       	mov	r28, r25
 346:	c5 95       	asr	r28
 348:	c5 95       	asr	r28
 34a:	c5 95       	asr	r28
 34c:	c5 95       	asr	r28
 34e:	c5 95       	asr	r28
				
				if (branders == 1 || branders == 3) { // bit 0
 350:	8c 2f       	mov	r24, r28
 352:	8d 7f       	andi	r24, 0xFD	; 253
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	49 f4       	brne	.+18     	; 0x36a <main+0xd0>
					brander(b1_geel_aan,b1_oranje_aan, b1_reset, PINB1 , PINB0 );
 358:	00 e0       	ldi	r16, 0x00	; 0
 35a:	21 e0       	ldi	r18, 0x01	; 1
 35c:	4a e6       	ldi	r20, 0x6A	; 106
 35e:	50 e0       	ldi	r21, 0x00	; 0
 360:	6b e6       	ldi	r22, 0x6B	; 107
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	8c e6       	ldi	r24, 0x6C	; 108
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0b df       	rcall	.-490    	; 0x180 <_Z7branderRVhS0_S0_cc>
				}
				if (branders == 2 || branders == 3) { // bit 1
 36a:	8e ef       	ldi	r24, 0xFE	; 254
 36c:	8c 0f       	add	r24, r28
 36e:	82 30       	cpi	r24, 0x02	; 2
 370:	48 f4       	brcc	.+18     	; 0x384 <main+0xea>
					brander(b2_geel_aan,b2_oranje_aan, b2_reset, PINB2 , PINB3 );
 372:	03 e0       	ldi	r16, 0x03	; 3
 374:	22 e0       	ldi	r18, 0x02	; 2
 376:	47 e6       	ldi	r20, 0x67	; 103
 378:	50 e0       	ldi	r21, 0x00	; 0
 37a:	68 e6       	ldi	r22, 0x68	; 104
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	89 e6       	ldi	r24, 0x69	; 105
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	fe de       	rcall	.-516    	; 0x180 <_Z7branderRVhS0_S0_cc>
				}
				if (branders >= 1 && branders <= 3) {
 384:	c1 50       	subi	r28, 0x01	; 1
 386:	c3 30       	cpi	r28, 0x03	; 3
 388:	38 f4       	brcc	.+14     	; 0x398 <main+0xfe>
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 38a:	a7 d0       	rcall	.+334    	; 0x4da <rand>
 38c:	b6 01       	movw	r22, r12
 38e:	34 d0       	rcall	.+104    	; 0x3f8 <__divmodhi4>
 390:	eb 01       	movw	r28, r22
 392:	cc 59       	subi	r28, 0x9C	; 156
 394:	df 4f       	sbci	r29, 0xFF	; 255
 396:	0e c0       	rjmp	.+28     	; 0x3b4 <main+0x11a>
					brander(b2_geel_aan,b2_oranje_aan, b2_reset, PINB2 , PINB3 );
				}
				if (branders >= 1 && branders <= 3) {
					doNothingTime = myRandomValue(100,200);
					} else {
					b1_geel_aan = FALSE;
 398:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <b1_geel_aan>
					b2_geel_aan = FALSE;
 39c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <b2_geel_aan>
					b1_oranje_aan = FALSE;
 3a0:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <b1_oranje_aan>
					b2_oranje_aan = FALSE;
 3a4:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <b2_oranje_aan>
					PORTB = ALL_LED_PINS;
 3a8:	78 ba       	out	0x18, r7	; 24
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 3aa:	97 d0       	rcall	.+302    	; 0x4da <rand>
 3ac:	b5 01       	movw	r22, r10
 3ae:	24 d0       	rcall	.+72     	; 0x3f8 <__divmodhi4>
 3b0:	eb 01       	movw	r28, r22
 3b2:	e2 96       	adiw	r28, 0x32	; 50
				} else {
				doNothingTime =2000;
			}
			
			
			if (lastCmdCount == 0) {
 3b4:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <lastCmdCount>
 3b8:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <lastCmdCount+0x1>
 3bc:	89 2b       	or	r24, r25
 3be:	31 f4       	brne	.+12     	; 0x3cc <main+0x132>
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 3c0:	8c d0       	rcall	.+280    	; 0x4da <rand>
				doNothingTime =2000;
			}
			
			
			if (lastCmdCount == 0) {
				misschien =  myRandomValue(0,254); //rand() / (RAND_MAX / 254 + 1) ;
 3c2:	b7 01       	movw	r22, r14
 3c4:	19 d0       	rcall	.+50     	; 0x3f8 <__divmodhi4>
 3c6:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <misschien>
 3ca:	8f cf       	rjmp	.-226    	; 0x2ea <main+0x50>
			} else {
				--lastCmdCount;
 3cc:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <lastCmdCount>
 3d0:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <lastCmdCount+0x1>
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <lastCmdCount+0x1>
 3da:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <lastCmdCount>
 3de:	85 cf       	rjmp	.-246    	; 0x2ea <main+0x50>
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 3e0:	7c d0       	rcall	.+248    	; 0x4da <rand>
				
				if (tel_aan > 0) {
					tel_aan--;
				}
				if (misschien ==  RANDOMNESS && tel_aan ==0) {
					tel_aan =  myRandomValue(50,50);
 3e2:	b4 01       	movw	r22, r8
 3e4:	09 d0       	rcall	.+18     	; 0x3f8 <__divmodhi4>
 3e6:	12 e3       	ldi	r17, 0x32	; 50
 3e8:	16 0f       	add	r17, r22
 3ea:	a7 cf       	rjmp	.-178    	; 0x33a <main+0xa0>
			if (misschien ==  RANDOMNESS || tel_aan > 0 || ( b1_geel_aan > 0  || b2_geel_aan > 0 || b1_oranje_aan > 0 || b2_oranje_aan > 0) ) {
				
				if (tel_aan > 0) {
					tel_aan--;
				}
				if (misschien ==  RANDOMNESS && tel_aan ==0) {
 3ec:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <misschien>
 3f0:	8e 31       	cpi	r24, 0x1E	; 30
 3f2:	b1 f3       	breq	.-20     	; 0x3e0 <main+0x146>
 3f4:	10 e0       	ldi	r17, 0x00	; 0
 3f6:	a1 cf       	rjmp	.-190    	; 0x33a <main+0xa0>

000003f8 <__divmodhi4>:
 3f8:	97 fb       	bst	r25, 7
 3fa:	07 2e       	mov	r0, r23
 3fc:	16 f4       	brtc	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	00 94       	com	r0
 400:	06 d0       	rcall	.+12     	; 0x40e <__divmodhi4_neg1>
 402:	77 fd       	sbrc	r23, 7
 404:	08 d0       	rcall	.+16     	; 0x416 <__divmodhi4_neg2>
 406:	0b d0       	rcall	.+22     	; 0x41e <__udivmodhi4>
 408:	07 fc       	sbrc	r0, 7
 40a:	05 d0       	rcall	.+10     	; 0x416 <__divmodhi4_neg2>
 40c:	3e f4       	brtc	.+14     	; 0x41c <__divmodhi4_exit>

0000040e <__divmodhi4_neg1>:
 40e:	90 95       	com	r25
 410:	81 95       	neg	r24
 412:	9f 4f       	sbci	r25, 0xFF	; 255
 414:	08 95       	ret

00000416 <__divmodhi4_neg2>:
 416:	70 95       	com	r23
 418:	61 95       	neg	r22
 41a:	7f 4f       	sbci	r23, 0xFF	; 255

0000041c <__divmodhi4_exit>:
 41c:	08 95       	ret

0000041e <__udivmodhi4>:
 41e:	aa 1b       	sub	r26, r26
 420:	bb 1b       	sub	r27, r27
 422:	51 e1       	ldi	r21, 0x11	; 17
 424:	07 c0       	rjmp	.+14     	; 0x434 <__udivmodhi4_ep>

00000426 <__udivmodhi4_loop>:
 426:	aa 1f       	adc	r26, r26
 428:	bb 1f       	adc	r27, r27
 42a:	a6 17       	cp	r26, r22
 42c:	b7 07       	cpc	r27, r23
 42e:	10 f0       	brcs	.+4      	; 0x434 <__udivmodhi4_ep>
 430:	a6 1b       	sub	r26, r22
 432:	b7 0b       	sbc	r27, r23

00000434 <__udivmodhi4_ep>:
 434:	88 1f       	adc	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	5a 95       	dec	r21
 43a:	a9 f7       	brne	.-22     	; 0x426 <__udivmodhi4_loop>
 43c:	80 95       	com	r24
 43e:	90 95       	com	r25
 440:	bc 01       	movw	r22, r24
 442:	cd 01       	movw	r24, r26
 444:	08 95       	ret

00000446 <do_rand>:
 446:	8f 92       	push	r8
 448:	9f 92       	push	r9
 44a:	af 92       	push	r10
 44c:	bf 92       	push	r11
 44e:	cf 92       	push	r12
 450:	df 92       	push	r13
 452:	ef 92       	push	r14
 454:	ff 92       	push	r15
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	ec 01       	movw	r28, r24
 45c:	68 81       	ld	r22, Y
 45e:	79 81       	ldd	r23, Y+1	; 0x01
 460:	8a 81       	ldd	r24, Y+2	; 0x02
 462:	9b 81       	ldd	r25, Y+3	; 0x03
 464:	61 15       	cp	r22, r1
 466:	71 05       	cpc	r23, r1
 468:	81 05       	cpc	r24, r1
 46a:	91 05       	cpc	r25, r1
 46c:	21 f4       	brne	.+8      	; 0x476 <do_rand+0x30>
 46e:	64 e2       	ldi	r22, 0x24	; 36
 470:	79 ed       	ldi	r23, 0xD9	; 217
 472:	8b e5       	ldi	r24, 0x5B	; 91
 474:	97 e0       	ldi	r25, 0x07	; 7
 476:	2d e1       	ldi	r18, 0x1D	; 29
 478:	33 ef       	ldi	r19, 0xF3	; 243
 47a:	41 e0       	ldi	r20, 0x01	; 1
 47c:	50 e0       	ldi	r21, 0x00	; 0
 47e:	82 d0       	rcall	.+260    	; 0x584 <__divmodsi4>
 480:	49 01       	movw	r8, r18
 482:	5a 01       	movw	r10, r20
 484:	27 ea       	ldi	r18, 0xA7	; 167
 486:	31 e4       	ldi	r19, 0x41	; 65
 488:	40 e0       	ldi	r20, 0x00	; 0
 48a:	50 e0       	ldi	r21, 0x00	; 0
 48c:	62 d0       	rcall	.+196    	; 0x552 <__mulsi3>
 48e:	6b 01       	movw	r12, r22
 490:	7c 01       	movw	r14, r24
 492:	2c ee       	ldi	r18, 0xEC	; 236
 494:	34 ef       	ldi	r19, 0xF4	; 244
 496:	4f ef       	ldi	r20, 0xFF	; 255
 498:	5f ef       	ldi	r21, 0xFF	; 255
 49a:	c5 01       	movw	r24, r10
 49c:	b4 01       	movw	r22, r8
 49e:	59 d0       	rcall	.+178    	; 0x552 <__mulsi3>
 4a0:	dc 01       	movw	r26, r24
 4a2:	cb 01       	movw	r24, r22
 4a4:	8c 0d       	add	r24, r12
 4a6:	9d 1d       	adc	r25, r13
 4a8:	ae 1d       	adc	r26, r14
 4aa:	bf 1d       	adc	r27, r15
 4ac:	b7 ff       	sbrs	r27, 7
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <do_rand+0x70>
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	a1 09       	sbc	r26, r1
 4b4:	b0 48       	sbci	r27, 0x80	; 128
 4b6:	88 83       	st	Y, r24
 4b8:	99 83       	std	Y+1, r25	; 0x01
 4ba:	aa 83       	std	Y+2, r26	; 0x02
 4bc:	bb 83       	std	Y+3, r27	; 0x03
 4be:	9f 77       	andi	r25, 0x7F	; 127
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	ff 90       	pop	r15
 4c6:	ef 90       	pop	r14
 4c8:	df 90       	pop	r13
 4ca:	cf 90       	pop	r12
 4cc:	bf 90       	pop	r11
 4ce:	af 90       	pop	r10
 4d0:	9f 90       	pop	r9
 4d2:	8f 90       	pop	r8
 4d4:	08 95       	ret

000004d6 <rand_r>:
 4d6:	b7 df       	rcall	.-146    	; 0x446 <do_rand>
 4d8:	08 95       	ret

000004da <rand>:
 4da:	80 e6       	ldi	r24, 0x60	; 96
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	b3 df       	rcall	.-154    	; 0x446 <do_rand>
 4e0:	08 95       	ret

000004e2 <srand>:
 4e2:	a0 e0       	ldi	r26, 0x00	; 0
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 4ea:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 4ee:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
 4f2:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
 4f6:	08 95       	ret

000004f8 <eeprom_read_byte>:
 4f8:	e1 99       	sbic	0x1c, 1	; 28
 4fa:	fe cf       	rjmp	.-4      	; 0x4f8 <eeprom_read_byte>
 4fc:	8e bb       	out	0x1e, r24	; 30
 4fe:	e0 9a       	sbi	0x1c, 0	; 28
 500:	99 27       	eor	r25, r25
 502:	8d b3       	in	r24, 0x1d	; 29
 504:	08 95       	ret

00000506 <eeprom_read_dword>:
 506:	a6 e1       	ldi	r26, 0x16	; 22
 508:	44 e0       	ldi	r20, 0x04	; 4
 50a:	0a c0       	rjmp	.+20     	; 0x520 <eeprom_read_blraw>

0000050c <eeprom_write_dword>:
 50c:	24 2f       	mov	r18, r20
 50e:	15 d0       	rcall	.+42     	; 0x53a <eeprom_write_r18>
 510:	25 2f       	mov	r18, r21
 512:	13 d0       	rcall	.+38     	; 0x53a <eeprom_write_r18>
 514:	00 c0       	rjmp	.+0      	; 0x516 <eeprom_write_word>

00000516 <eeprom_write_word>:
 516:	10 d0       	rcall	.+32     	; 0x538 <eeprom_write_byte>
 518:	27 2f       	mov	r18, r23
 51a:	0f c0       	rjmp	.+30     	; 0x53a <eeprom_write_r18>

0000051c <eeprom_read_block>:
 51c:	a8 2f       	mov	r26, r24
 51e:	86 2f       	mov	r24, r22

00000520 <eeprom_read_blraw>:
 520:	e8 2f       	mov	r30, r24
 522:	e1 99       	sbic	0x1c, 1	; 28
 524:	fe cf       	rjmp	.-4      	; 0x522 <eeprom_read_blraw+0x2>
 526:	05 c0       	rjmp	.+10     	; 0x532 <eeprom_read_blraw+0x12>
 528:	ee bb       	out	0x1e, r30	; 30
 52a:	e0 9a       	sbi	0x1c, 0	; 28
 52c:	e3 95       	inc	r30
 52e:	0d b2       	in	r0, 0x1d	; 29
 530:	0d 92       	st	X+, r0
 532:	41 50       	subi	r20, 0x01	; 1
 534:	c8 f7       	brcc	.-14     	; 0x528 <eeprom_read_blraw+0x8>
 536:	08 95       	ret

00000538 <eeprom_write_byte>:
 538:	26 2f       	mov	r18, r22

0000053a <eeprom_write_r18>:
 53a:	e1 99       	sbic	0x1c, 1	; 28
 53c:	fe cf       	rjmp	.-4      	; 0x53a <eeprom_write_r18>
 53e:	1c ba       	out	0x1c, r1	; 28
 540:	8e bb       	out	0x1e, r24	; 30
 542:	2d bb       	out	0x1d, r18	; 29
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	f8 94       	cli
 548:	e2 9a       	sbi	0x1c, 2	; 28
 54a:	e1 9a       	sbi	0x1c, 1	; 28
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	01 96       	adiw	r24, 0x01	; 1
 550:	08 95       	ret

00000552 <__mulsi3>:
 552:	ee 27       	eor	r30, r30
 554:	ff 27       	eor	r31, r31

00000556 <__mulsi3_helper>:
 556:	aa 27       	eor	r26, r26
 558:	bb 27       	eor	r27, r27
 55a:	08 c0       	rjmp	.+16     	; 0x56c <__mulsi3_helper+0x16>
 55c:	a2 0f       	add	r26, r18
 55e:	b3 1f       	adc	r27, r19
 560:	e4 1f       	adc	r30, r20
 562:	f5 1f       	adc	r31, r21
 564:	22 0f       	add	r18, r18
 566:	33 1f       	adc	r19, r19
 568:	44 1f       	adc	r20, r20
 56a:	55 1f       	adc	r21, r21
 56c:	96 95       	lsr	r25
 56e:	87 95       	ror	r24
 570:	77 95       	ror	r23
 572:	67 95       	ror	r22
 574:	98 f3       	brcs	.-26     	; 0x55c <__mulsi3_helper+0x6>
 576:	70 40       	sbci	r23, 0x00	; 0
 578:	a9 f7       	brne	.-22     	; 0x564 <__mulsi3_helper+0xe>
 57a:	00 97       	sbiw	r24, 0x00	; 0
 57c:	99 f7       	brne	.-26     	; 0x564 <__mulsi3_helper+0xe>
 57e:	bd 01       	movw	r22, r26
 580:	cf 01       	movw	r24, r30
 582:	08 95       	ret

00000584 <__divmodsi4>:
 584:	05 2e       	mov	r0, r21
 586:	97 fb       	bst	r25, 7
 588:	16 f4       	brtc	.+4      	; 0x58e <__divmodsi4+0xa>
 58a:	00 94       	com	r0
 58c:	0f d0       	rcall	.+30     	; 0x5ac <__negsi2>
 58e:	57 fd       	sbrc	r21, 7
 590:	05 d0       	rcall	.+10     	; 0x59c <__divmodsi4_neg2>
 592:	14 d0       	rcall	.+40     	; 0x5bc <__udivmodsi4>
 594:	07 fc       	sbrc	r0, 7
 596:	02 d0       	rcall	.+4      	; 0x59c <__divmodsi4_neg2>
 598:	46 f4       	brtc	.+16     	; 0x5aa <__divmodsi4_exit>
 59a:	08 c0       	rjmp	.+16     	; 0x5ac <__negsi2>

0000059c <__divmodsi4_neg2>:
 59c:	50 95       	com	r21
 59e:	40 95       	com	r20
 5a0:	30 95       	com	r19
 5a2:	21 95       	neg	r18
 5a4:	3f 4f       	sbci	r19, 0xFF	; 255
 5a6:	4f 4f       	sbci	r20, 0xFF	; 255
 5a8:	5f 4f       	sbci	r21, 0xFF	; 255

000005aa <__divmodsi4_exit>:
 5aa:	08 95       	ret

000005ac <__negsi2>:
 5ac:	90 95       	com	r25
 5ae:	80 95       	com	r24
 5b0:	70 95       	com	r23
 5b2:	61 95       	neg	r22
 5b4:	7f 4f       	sbci	r23, 0xFF	; 255
 5b6:	8f 4f       	sbci	r24, 0xFF	; 255
 5b8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ba:	08 95       	ret

000005bc <__udivmodsi4>:
 5bc:	a1 e2       	ldi	r26, 0x21	; 33
 5be:	1a 2e       	mov	r1, r26
 5c0:	aa 1b       	sub	r26, r26
 5c2:	bb 1b       	sub	r27, r27
 5c4:	fd 01       	movw	r30, r26
 5c6:	0d c0       	rjmp	.+26     	; 0x5e2 <__udivmodsi4_ep>

000005c8 <__udivmodsi4_loop>:
 5c8:	aa 1f       	adc	r26, r26
 5ca:	bb 1f       	adc	r27, r27
 5cc:	ee 1f       	adc	r30, r30
 5ce:	ff 1f       	adc	r31, r31
 5d0:	a2 17       	cp	r26, r18
 5d2:	b3 07       	cpc	r27, r19
 5d4:	e4 07       	cpc	r30, r20
 5d6:	f5 07       	cpc	r31, r21
 5d8:	20 f0       	brcs	.+8      	; 0x5e2 <__udivmodsi4_ep>
 5da:	a2 1b       	sub	r26, r18
 5dc:	b3 0b       	sbc	r27, r19
 5de:	e4 0b       	sbc	r30, r20
 5e0:	f5 0b       	sbc	r31, r21

000005e2 <__udivmodsi4_ep>:
 5e2:	66 1f       	adc	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	88 1f       	adc	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	1a 94       	dec	r1
 5ec:	69 f7       	brne	.-38     	; 0x5c8 <__udivmodsi4_loop>
 5ee:	60 95       	com	r22
 5f0:	70 95       	com	r23
 5f2:	80 95       	com	r24
 5f4:	90 95       	com	r25
 5f6:	9b 01       	movw	r18, r22
 5f8:	ac 01       	movw	r20, r24
 5fa:	bd 01       	movw	r22, r26
 5fc:	cf 01       	movw	r24, r30
 5fe:	08 95       	ret

00000600 <_exit>:
 600:	f8 94       	cli

00000602 <__stop_program>:
 602:	ff cf       	rjmp	.-2      	; 0x602 <__stop_program>
