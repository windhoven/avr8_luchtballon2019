
Luchtballon2019.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000061c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000061c  000006d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800066  00800066  000006d6  2**0
                  ALLOC
  3 .eeprom       00000005  00810000  00810000  000006d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000006db  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000070c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  00000750  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000ed6  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000067b  00000000  00000000  00001746  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000086f  00000000  00000000  00001dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000120  00000000  00000000  00002630  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000548  00000000  00000000  00002750  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000550  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a8  00000000  00000000  000031e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	a0 c0       	rjmp	.+320    	; 0x150 <__vector_7>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ec e1       	ldi	r30, 0x1C	; 28
  36:	f6 e0       	ldi	r31, 0x06	; 6
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a6 36       	cpi	r26, 0x66	; 102
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a6 e6       	ldi	r26, 0x66	; 102
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	ae 37       	cpi	r26, 0x7E	; 126
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	2e d1       	rcall	.+604    	; 0x2b2 <main>
  56:	e0 c2       	rjmp	.+1472   	; 0x618 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <_Z10USART_Initv>:
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
}
  5a:	12 b8       	out	0x02, r1	; 2
  5c:	85 e0       	ldi	r24, 0x05	; 5
  5e:	89 b9       	out	0x09, r24	; 9
  60:	80 e9       	ldi	r24, 0x90	; 144
  62:	8a b9       	out	0x0a, r24	; 10
  64:	86 e0       	ldi	r24, 0x06	; 6
  66:	83 b9       	out	0x03, r24	; 3
  68:	08 95       	ret

0000006a <_Z11resetBufferv>:
  6a:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <_ZL9rx_buffer>
  6e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <_ZL10data_count>
  72:	08 95       	ret

00000074 <_Z14processCommandv>:
  74:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <_ZL13command_ready>
  78:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <_ZL10command_in+0x1>
  7c:	88 23       	and	r24, r24
  7e:	24 f4       	brge	.+8      	; 0x88 <_Z14processCommandv+0x14>
  80:	8e e1       	ldi	r24, 0x1E	; 30
  82:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <misschien>
  86:	0c c0       	rjmp	.+24     	; 0xa0 <_Z14processCommandv+0x2c>
  88:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <misschien>
  8c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <b1_geel_aan>
  90:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <b2_geel_aan>
  94:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <b1_oranje_aan>
  98:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <b2_oranje_aan>
  9c:	8f e0       	ldi	r24, 0x0F	; 15
  9e:	88 bb       	out	0x18, r24	; 24
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ignore>
  a6:	08 95       	ret

000000a8 <_Z15putCharToBufferh>:
  a8:	cf 93       	push	r28
  aa:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <_ZL13command_ready>
  ae:	91 30       	cpi	r25, 0x01	; 1
  b0:	09 f4       	brne	.+2      	; 0xb4 <_Z15putCharToBufferh+0xc>
  b2:	4c c0       	rjmp	.+152    	; 0x14c <__stack+0x6d>
  b4:	c8 2f       	mov	r28, r24
  b6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <_ZL10data_count>
  ba:	86 30       	cpi	r24, 0x06	; 6
  bc:	30 f0       	brcs	.+12     	; 0xca <_Z15putCharToBufferh+0x22>
  be:	d5 df       	rcall	.-86     	; 0x6a <_Z11resetBufferv>
  c0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <endOfCommand>
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ignore>
  ca:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <_ZL10data_count>
  ce:	81 11       	cpse	r24, r1
  d0:	04 c0       	rjmp	.+8      	; 0xda <_Z15putCharToBufferh+0x32>
  d2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  d6:	8c 17       	cp	r24, r28
  d8:	b1 f1       	breq	.+108    	; 0x146 <__stack+0x67>
  da:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <_ZL10data_count>
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	8e 0f       	add	r24, r30
  e2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <_ZL10data_count>
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	e8 58       	subi	r30, 0x88	; 136
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	c0 83       	st	Z, r28
  ee:	cd 30       	cpi	r28, 0x0D	; 13
  f0:	21 f5       	brne	.+72     	; 0x13a <__stack+0x5b>
  f2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <endOfCommand>
  f6:	88 23       	and	r24, r24
  f8:	49 f1       	breq	.+82     	; 0x14c <__stack+0x6d>
  fa:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <ignore>
  fe:	81 11       	cpse	r24, r1
 100:	11 c0       	rjmp	.+34     	; 0x124 <__stack+0x45>
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <_ZL13command_ready>
 108:	e2 e7       	ldi	r30, 0x72	; 114
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	dc 01       	movw	r26, r24
 112:	a8 58       	subi	r26, 0x88	; 136
 114:	bf 4f       	sbci	r27, 0xFF	; 255
 116:	2c 91       	ld	r18, X
 118:	21 93       	st	Z+, r18
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	86 30       	cpi	r24, 0x06	; 6
 11e:	91 05       	cpc	r25, r1
 120:	b9 f7       	brne	.-18     	; 0x110 <__stack+0x31>
 122:	a8 df       	rcall	.-176    	; 0x74 <_Z14processCommandv>
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ignore>
 12a:	9f df       	rcall	.-194    	; 0x6a <_Z11resetBufferv>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e2       	ldi	r25, 0x20	; 32
 130:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <lastCmdCount+0x1>
 134:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <lastCmdCount>
 138:	09 c0       	rjmp	.+18     	; 0x14c <__stack+0x6d>
 13a:	ca 30       	cpi	r28, 0x0A	; 10
 13c:	39 f4       	brne	.+14     	; 0x14c <__stack+0x6d>
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <endOfCommand>
 144:	03 c0       	rjmp	.+6      	; 0x14c <__stack+0x6d>
 146:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <ignore>
 14a:	c7 cf       	rjmp	.-114    	; 0xda <_Z15putCharToBufferh+0x32>
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <__vector_7>:
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	5f 93       	push	r21
 162:	6f 93       	push	r22
 164:	7f 93       	push	r23
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
 172:	8c b1       	in	r24, 0x0c	; 12
 174:	99 df       	rcall	.-206    	; 0xa8 <_Z15putCharToBufferh>
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <_Z7branderRVhS0_S0_cc>:

void brander(volatile uint8_t& b_geel_aan,volatile uint8_t& b_oranje_aan,volatile uint8_t& b_reset, char pin_geel /* 1 */, char pin_oranje /* 0 */) {
 198:	ef 92       	push	r14
 19a:	ff 92       	push	r15
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	ec 01       	movw	r28, r24
 1a6:	7b 01       	movw	r14, r22
 1a8:	12 2f       	mov	r17, r18
	if (b_geel_aan == TRUE) {
 1aa:	88 81       	ld	r24, Y
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	11 f5       	brne	.+68     	; 0x1f4 <_Z7branderRVhS0_S0_cc+0x5c>
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 1b0:	a0 d1       	rcall	.+832    	; 0x4f2 <rand>
}

void brander(volatile uint8_t& b_geel_aan,volatile uint8_t& b_oranje_aan,volatile uint8_t& b_reset, char pin_geel /* 1 */, char pin_oranje /* 0 */) {
	if (b_geel_aan == TRUE) {
		if (myRandomValue(0,B_ORANJE) ==0) {
 1b2:	6b ea       	ldi	r22, 0xAB	; 171
 1b4:	7a e2       	ldi	r23, 0x2A	; 42
 1b6:	2c d1       	rcall	.+600    	; 0x410 <__divmodhi4>
 1b8:	67 2b       	or	r22, r23
 1ba:	79 f4       	brne	.+30     	; 0x1da <_Z7branderRVhS0_S0_cc+0x42>
			PORTB &= ~(1 << pin_geel); // High
 1bc:	28 b3       	in	r18, 0x18	; 24
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <_Z7branderRVhS0_S0_cc+0x30>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	1a 95       	dec	r17
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <_Z7branderRVhS0_S0_cc+0x2c>
 1cc:	80 95       	com	r24
 1ce:	82 23       	and	r24, r18
 1d0:	88 bb       	out	0x18, r24	; 24
			b_oranje_aan = TRUE;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	f7 01       	movw	r30, r14
 1d6:	80 83       	st	Z, r24
 1d8:	26 c0       	rjmp	.+76     	; 0x226 <_Z7branderRVhS0_S0_cc+0x8e>
		} else {
			PORTB  |= (1 << pin_geel);  // Low
 1da:	28 b3       	in	r18, 0x18	; 24
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <_Z7branderRVhS0_S0_cc+0x4e>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	1a 95       	dec	r17
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <_Z7branderRVhS0_S0_cc+0x4a>
 1ea:	82 2b       	or	r24, r18
 1ec:	88 bb       	out	0x18, r24	; 24
			b_oranje_aan = FALSE;
 1ee:	f7 01       	movw	r30, r14
 1f0:	10 82       	st	Z, r1
 1f2:	19 c0       	rjmp	.+50     	; 0x226 <_Z7branderRVhS0_S0_cc+0x8e>
		}
	} else {
		if (b_oranje_aan == TRUE) {
 1f4:	fb 01       	movw	r30, r22
 1f6:	80 81       	ld	r24, Z
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	a9 f4       	brne	.+42     	; 0x226 <_Z7branderRVhS0_S0_cc+0x8e>
			b_reset+=1;
 1fc:	fa 01       	movw	r30, r20
 1fe:	80 81       	ld	r24, Z
 200:	8f 5f       	subi	r24, 0xFF	; 255
 202:	80 83       	st	Z, r24
			
			if (b_reset >=5)
 204:	80 81       	ld	r24, Z
 206:	85 30       	cpi	r24, 0x05	; 5
 208:	70 f0       	brcs	.+28     	; 0x226 <_Z7branderRVhS0_S0_cc+0x8e>
			{
				PORTB |= (1 << pin_geel);  // Low
 20a:	28 b3       	in	r18, 0x18	; 24
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <_Z7branderRVhS0_S0_cc+0x7e>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	1a 95       	dec	r17
 218:	e2 f7       	brpl	.-8      	; 0x212 <_Z7branderRVhS0_S0_cc+0x7a>
 21a:	82 2b       	or	r24, r18
 21c:	88 bb       	out	0x18, r24	; 24
				b_oranje_aan = FALSE;
 21e:	fb 01       	movw	r30, r22
 220:	10 82       	st	Z, r1
				
				b_reset = 0;
 222:	fa 01       	movw	r30, r20
 224:	10 82       	st	Z, r1
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 226:	65 d1       	rcall	.+714    	; 0x4f2 <rand>
				b_reset = 0;
			}
		}
	}
	
	if (myRandomValue(0,B_GEEL) ==0) { 
 228:	81 15       	cp	r24, r1
 22a:	90 48       	sbci	r25, 0x80	; 128
 22c:	01 f1       	breq	.+64     	; 0x26e <_Z7branderRVhS0_S0_cc+0xd6>
		if (b_geel_aan == FALSE) {
 22e:	88 81       	ld	r24, Y
 230:	81 11       	cpse	r24, r1
 232:	0e c0       	rjmp	.+28     	; 0x250 <_Z7branderRVhS0_S0_cc+0xb8>
			PORTB &= ~(1 << pin_oranje);
 234:	28 b3       	in	r18, 0x18	; 24
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <_Z7branderRVhS0_S0_cc+0xa8>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	0a 95       	dec	r16
 242:	e2 f7       	brpl	.-8      	; 0x23c <_Z7branderRVhS0_S0_cc+0xa4>
 244:	80 95       	com	r24
 246:	82 23       	and	r24, r18
 248:	88 bb       	out	0x18, r24	; 24
			b_geel_aan = TRUE;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	88 83       	st	Y, r24
 24e:	0f c0       	rjmp	.+30     	; 0x26e <_Z7branderRVhS0_S0_cc+0xd6>
		} else {
			if (b_oranje_aan == FALSE) {
 250:	f7 01       	movw	r30, r14
 252:	80 81       	ld	r24, Z
 254:	81 11       	cpse	r24, r1
 256:	0b c0       	rjmp	.+22     	; 0x26e <_Z7branderRVhS0_S0_cc+0xd6>
				PORTB |= (1 << pin_oranje);
 258:	28 b3       	in	r18, 0x18	; 24
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <_Z7branderRVhS0_S0_cc+0xcc>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	0a 95       	dec	r16
 266:	e2 f7       	brpl	.-8      	; 0x260 <_Z7branderRVhS0_S0_cc+0xc8>
 268:	82 2b       	or	r24, r18
 26a:	88 bb       	out	0x18, r24	; 24
				b_geel_aan = FALSE;
 26c:	18 82       	st	Y, r1
			}
		}
	}
}
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	ff 90       	pop	r15
 278:	ef 90       	pop	r14
 27a:	08 95       	ret

0000027c <_Z8initrandv>:
void initrand()
{
        uint32_t state;
        static uint32_t EEMEM sstate = 1;

        state = eeprom_read_dword(&sstate);
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	4e d1       	rcall	.+668    	; 0x51e <eeprom_read_dword>

        // Check if it's unwritten EEPROM (first time). Use something funny in that case.
        if (state == 0xffffffUL)
 282:	6f 3f       	cpi	r22, 0xFF	; 255
 284:	2f ef       	ldi	r18, 0xFF	; 255
 286:	72 07       	cpc	r23, r18
 288:	82 07       	cpc	r24, r18
 28a:	91 05       	cpc	r25, r1
 28c:	21 f4       	brne	.+8      	; 0x296 <_Z8initrandv+0x1a>
                state = 0xDEADBEEFUL;
 28e:	6f ee       	ldi	r22, 0xEF	; 239
 290:	7e eb       	ldi	r23, 0xBE	; 190
 292:	8d ea       	ldi	r24, 0xAD	; 173
 294:	9e ed       	ldi	r25, 0xDE	; 222
        srand(state);
 296:	cb 01       	movw	r24, r22
 298:	30 d1       	rcall	.+608    	; 0x4fa <srand>
		
		state = !state;
        eeprom_write_dword(&sstate,rand());
 29a:	2b d1       	rcall	.+598    	; 0x4f2 <rand>
 29c:	ac 01       	movw	r20, r24
 29e:	99 0f       	add	r25, r25
 2a0:	66 0b       	sbc	r22, r22
 2a2:	77 0b       	sbc	r23, r23
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	3d d1       	rcall	.+634    	; 0x524 <eeprom_write_dword>
		 
		 misschien = RANDOMNESS;
 2aa:	8e e1       	ldi	r24, 0x1E	; 30
 2ac:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <misschien>
 2b0:	08 95       	ret

000002b2 <main>:

int main(void)
{		
	//DDRB  = 0x0F; // set PORTB for output = 0xff
	//PORTB  = 0x0F; // 0x00 = OFF all LEDs initially
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2) | (1<<DDB3) ; // = outputs voor branders
 2b2:	8f e0       	ldi	r24, 0x0F	; 15
 2b4:	87 bb       	out	0x17, r24	; 23
	PORTB  = ALL_LED_PINS;
 2b6:	88 bb       	out	0x18, r24	; 24
	
	USART_Init();
 2b8:	d0 de       	rcall	.-608    	; 0x5a <_Z10USART_Initv>
	
	eAddress = eeprom_read_byte(&deviceConfig);
 2ba:	84 e0       	ldi	r24, 0x04	; 4
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	28 d1       	rcall	.+592    	; 0x510 <eeprom_read_byte>
 2c0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>

	
	sei();
 2c4:	78 94       	sei

	initrand();
 2c6:	da df       	rcall	.-76     	; 0x27c <_Z8initrandv>
	
	uint16_t doNothingTime = 0;
	uint8_t tel_aan =0;
 2c8:	10 e0       	ldi	r17, 0x00	; 0
	
	sei();

	initrand();
	
	uint16_t doNothingTime = 0;
 2ca:	c0 e0       	ldi	r28, 0x00	; 0
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
				
				if (tel_aan > 0) {
					tel_aan--;
				}
				if (misschien ==  RANDOMNESS && tel_aan ==0) {
					tel_aan =  myRandomValue(50,50);
 2ce:	0f 2e       	mov	r0, r31
 2d0:	f0 e9       	ldi	r31, 0x90	; 144
 2d2:	8f 2e       	mov	r8, r31
 2d4:	f2 e0       	ldi	r31, 0x02	; 2
 2d6:	9f 2e       	mov	r9, r31
 2d8:	f0 2d       	mov	r31, r0
				doNothingTime =2000;
			}
			
			
			if (lastCmdCount == 0) {
				misschien =  myRandomValue(0,254); //rand() / (RAND_MAX / 254 + 1) ;
 2da:	0f 2e       	mov	r0, r31
 2dc:	f2 e8       	ldi	r31, 0x82	; 130
 2de:	ef 2e       	mov	r14, r31
 2e0:	f1 2c       	mov	r15, r1
 2e2:	f0 2d       	mov	r31, r0
					} else {
					b1_geel_aan = FALSE;
					b2_geel_aan = FALSE;
					b1_oranje_aan = FALSE;
					b2_oranje_aan = FALSE;
					PORTB = ALL_LED_PINS;
 2e4:	0f 2e       	mov	r0, r31
 2e6:	ff e0       	ldi	r31, 0x0F	; 15
 2e8:	7f 2e       	mov	r7, r31
 2ea:	f0 2d       	mov	r31, r0
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 2ec:	0f 2e       	mov	r0, r31
 2ee:	f8 e4       	ldi	r31, 0x48	; 72
 2f0:	af 2e       	mov	r10, r31
 2f2:	bb 24       	eor	r11, r11
 2f4:	b3 94       	inc	r11
 2f6:	f0 2d       	mov	r31, r0
 2f8:	0f 2e       	mov	r0, r31
 2fa:	f4 ea       	ldi	r31, 0xA4	; 164
 2fc:	cf 2e       	mov	r12, r31
 2fe:	d1 2c       	mov	r13, r1
 300:	f0 2d       	mov	r31, r0
	uint8_t tel_aan =0;
	while(1)
	{

		//TODO:: Please write your application code
		if (doNothingTime > 0) {
 302:	20 97       	sbiw	r28, 0x00	; 0
 304:	11 f0       	breq	.+4      	; 0x30a <main+0x58>
			doNothingTime--;
 306:	21 97       	sbiw	r28, 0x01	; 1
 308:	fc cf       	rjmp	.-8      	; 0x302 <main+0x50>
		} else {
			if (misschien ==  RANDOMNESS || tel_aan > 0 || ( b1_geel_aan > 0  || b2_geel_aan > 0 || b1_oranje_aan > 0 || b2_oranje_aan > 0) ) {
 30a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <misschien>
 30e:	8e 31       	cpi	r24, 0x1E	; 30
 310:	a9 f0       	breq	.+42     	; 0x33c <main+0x8a>
 312:	11 11       	cpse	r17, r1
 314:	16 c0       	rjmp	.+44     	; 0x342 <main+0x90>
 316:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <b1_geel_aan>
 31a:	81 11       	cpse	r24, r1
 31c:	73 c0       	rjmp	.+230    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 31e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <b2_geel_aan>
 322:	81 11       	cpse	r24, r1
 324:	6f c0       	rjmp	.+222    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 326:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <b1_oranje_aan>
 32a:	81 11       	cpse	r24, r1
 32c:	6b c0       	rjmp	.+214    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 32e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <b2_oranje_aan>
 332:	81 11       	cpse	r24, r1
 334:	07 c0       	rjmp	.+14     	; 0x344 <main+0x92>
					b2_oranje_aan = FALSE;
					PORTB = ALL_LED_PINS;
					doNothingTime = myRandomValue(50,100);
				}
				} else {
				doNothingTime =2000;
 336:	c0 ed       	ldi	r28, 0xD0	; 208
 338:	d7 e0       	ldi	r29, 0x07	; 7
 33a:	48 c0       	rjmp	.+144    	; 0x3cc <main+0x11a>
		if (doNothingTime > 0) {
			doNothingTime--;
		} else {
			if (misschien ==  RANDOMNESS || tel_aan > 0 || ( b1_geel_aan > 0  || b2_geel_aan > 0 || b1_oranje_aan > 0 || b2_oranje_aan > 0) ) {
				
				if (tel_aan > 0) {
 33c:	11 23       	and	r17, r17
 33e:	09 f4       	brne	.+2      	; 0x342 <main+0x90>
 340:	61 c0       	rjmp	.+194    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
					tel_aan--;
 342:	11 50       	subi	r17, 0x01	; 1
				}
				if (misschien ==  RANDOMNESS && tel_aan ==0) {
 344:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <misschien>
 348:	8e 31       	cpi	r24, 0x1E	; 30
 34a:	19 f4       	brne	.+6      	; 0x352 <main+0xa0>
 34c:	11 23       	and	r17, r17
 34e:	09 f4       	brne	.+2      	; 0x352 <main+0xa0>
 350:	53 c0       	rjmp	.+166    	; 0x3f8 <main+0x146>
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 352:	cf d0       	rcall	.+414    	; 0x4f2 <rand>
				}
				if (misschien ==  RANDOMNESS && tel_aan ==0) {
					tel_aan =  myRandomValue(50,50);
				}
				
				uint8_t branders =	myRandomValue(0,4);
 354:	99 23       	and	r25, r25
 356:	14 f4       	brge	.+4      	; 0x35c <main+0xaa>
 358:	81 50       	subi	r24, 0x01	; 1
 35a:	90 4e       	sbci	r25, 0xE0	; 224
 35c:	c9 2f       	mov	r28, r25
 35e:	c5 95       	asr	r28
 360:	c5 95       	asr	r28
 362:	c5 95       	asr	r28
 364:	c5 95       	asr	r28
 366:	c5 95       	asr	r28
				
				if (branders == 1 || branders == 3) { // bit 0
 368:	8c 2f       	mov	r24, r28
 36a:	8d 7f       	andi	r24, 0xFD	; 253
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	49 f4       	brne	.+18     	; 0x382 <main+0xd0>
					brander(b1_geel_aan,b1_oranje_aan, b1_reset, PINB1 , PINB0 );
 370:	00 e0       	ldi	r16, 0x00	; 0
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	4a e6       	ldi	r20, 0x6A	; 106
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	6b e6       	ldi	r22, 0x6B	; 107
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	8c e6       	ldi	r24, 0x6C	; 108
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0b df       	rcall	.-490    	; 0x198 <_Z7branderRVhS0_S0_cc>
				}
				if (branders == 2 || branders == 3) { // bit 1
 382:	8e ef       	ldi	r24, 0xFE	; 254
 384:	8c 0f       	add	r24, r28
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	48 f4       	brcc	.+18     	; 0x39c <main+0xea>
					brander(b2_geel_aan,b2_oranje_aan, b2_reset, PINB2 , PINB3 );
 38a:	03 e0       	ldi	r16, 0x03	; 3
 38c:	22 e0       	ldi	r18, 0x02	; 2
 38e:	47 e6       	ldi	r20, 0x67	; 103
 390:	50 e0       	ldi	r21, 0x00	; 0
 392:	68 e6       	ldi	r22, 0x68	; 104
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	89 e6       	ldi	r24, 0x69	; 105
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	fe de       	rcall	.-516    	; 0x198 <_Z7branderRVhS0_S0_cc>
				}
				if (branders >= 1 && branders <= 3) {
 39c:	c1 50       	subi	r28, 0x01	; 1
 39e:	c3 30       	cpi	r28, 0x03	; 3
 3a0:	38 f4       	brcc	.+14     	; 0x3b0 <main+0xfe>
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 3a2:	a7 d0       	rcall	.+334    	; 0x4f2 <rand>
 3a4:	b6 01       	movw	r22, r12
 3a6:	34 d0       	rcall	.+104    	; 0x410 <__divmodhi4>
 3a8:	eb 01       	movw	r28, r22
 3aa:	cc 59       	subi	r28, 0x9C	; 156
 3ac:	df 4f       	sbci	r29, 0xFF	; 255
 3ae:	0e c0       	rjmp	.+28     	; 0x3cc <main+0x11a>
					brander(b2_geel_aan,b2_oranje_aan, b2_reset, PINB2 , PINB3 );
				}
				if (branders >= 1 && branders <= 3) {
					doNothingTime = myRandomValue(100,200);
					} else {
					b1_geel_aan = FALSE;
 3b0:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <b1_geel_aan>
					b2_geel_aan = FALSE;
 3b4:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <b2_geel_aan>
					b1_oranje_aan = FALSE;
 3b8:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <b1_oranje_aan>
					b2_oranje_aan = FALSE;
 3bc:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <b2_oranje_aan>
					PORTB = ALL_LED_PINS;
 3c0:	78 ba       	out	0x18, r7	; 24
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 3c2:	97 d0       	rcall	.+302    	; 0x4f2 <rand>
 3c4:	b5 01       	movw	r22, r10
 3c6:	24 d0       	rcall	.+72     	; 0x410 <__divmodhi4>
 3c8:	eb 01       	movw	r28, r22
 3ca:	e2 96       	adiw	r28, 0x32	; 50
				} else {
				doNothingTime =2000;
			}
			
			
			if (lastCmdCount == 0) {
 3cc:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <lastCmdCount>
 3d0:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <lastCmdCount+0x1>
 3d4:	89 2b       	or	r24, r25
 3d6:	31 f4       	brne	.+12     	; 0x3e4 <main+0x132>
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 3d8:	8c d0       	rcall	.+280    	; 0x4f2 <rand>
				doNothingTime =2000;
			}
			
			
			if (lastCmdCount == 0) {
				misschien =  myRandomValue(0,254); //rand() / (RAND_MAX / 254 + 1) ;
 3da:	b7 01       	movw	r22, r14
 3dc:	19 d0       	rcall	.+50     	; 0x410 <__divmodhi4>
 3de:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <misschien>
 3e2:	8f cf       	rjmp	.-226    	; 0x302 <main+0x50>
			} else {
				--lastCmdCount;
 3e4:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <lastCmdCount>
 3e8:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <lastCmdCount+0x1>
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <lastCmdCount+0x1>
 3f2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <lastCmdCount>
 3f6:	85 cf       	rjmp	.-246    	; 0x302 <main+0x50>
	unsigned char temp = UDR;
	putCharToBuffer(temp);	
}

uint16_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));	
 3f8:	7c d0       	rcall	.+248    	; 0x4f2 <rand>
				
				if (tel_aan > 0) {
					tel_aan--;
				}
				if (misschien ==  RANDOMNESS && tel_aan ==0) {
					tel_aan =  myRandomValue(50,50);
 3fa:	b4 01       	movw	r22, r8
 3fc:	09 d0       	rcall	.+18     	; 0x410 <__divmodhi4>
 3fe:	12 e3       	ldi	r17, 0x32	; 50
 400:	16 0f       	add	r17, r22
 402:	a7 cf       	rjmp	.-178    	; 0x352 <main+0xa0>
			if (misschien ==  RANDOMNESS || tel_aan > 0 || ( b1_geel_aan > 0  || b2_geel_aan > 0 || b1_oranje_aan > 0 || b2_oranje_aan > 0) ) {
				
				if (tel_aan > 0) {
					tel_aan--;
				}
				if (misschien ==  RANDOMNESS && tel_aan ==0) {
 404:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <misschien>
 408:	8e 31       	cpi	r24, 0x1E	; 30
 40a:	b1 f3       	breq	.-20     	; 0x3f8 <main+0x146>
 40c:	10 e0       	ldi	r17, 0x00	; 0
 40e:	a1 cf       	rjmp	.-190    	; 0x352 <main+0xa0>

00000410 <__divmodhi4>:
 410:	97 fb       	bst	r25, 7
 412:	07 2e       	mov	r0, r23
 414:	16 f4       	brtc	.+4      	; 0x41a <__divmodhi4+0xa>
 416:	00 94       	com	r0
 418:	06 d0       	rcall	.+12     	; 0x426 <__divmodhi4_neg1>
 41a:	77 fd       	sbrc	r23, 7
 41c:	08 d0       	rcall	.+16     	; 0x42e <__divmodhi4_neg2>
 41e:	0b d0       	rcall	.+22     	; 0x436 <__udivmodhi4>
 420:	07 fc       	sbrc	r0, 7
 422:	05 d0       	rcall	.+10     	; 0x42e <__divmodhi4_neg2>
 424:	3e f4       	brtc	.+14     	; 0x434 <__divmodhi4_exit>

00000426 <__divmodhi4_neg1>:
 426:	90 95       	com	r25
 428:	81 95       	neg	r24
 42a:	9f 4f       	sbci	r25, 0xFF	; 255
 42c:	08 95       	ret

0000042e <__divmodhi4_neg2>:
 42e:	70 95       	com	r23
 430:	61 95       	neg	r22
 432:	7f 4f       	sbci	r23, 0xFF	; 255

00000434 <__divmodhi4_exit>:
 434:	08 95       	ret

00000436 <__udivmodhi4>:
 436:	aa 1b       	sub	r26, r26
 438:	bb 1b       	sub	r27, r27
 43a:	51 e1       	ldi	r21, 0x11	; 17
 43c:	07 c0       	rjmp	.+14     	; 0x44c <__udivmodhi4_ep>

0000043e <__udivmodhi4_loop>:
 43e:	aa 1f       	adc	r26, r26
 440:	bb 1f       	adc	r27, r27
 442:	a6 17       	cp	r26, r22
 444:	b7 07       	cpc	r27, r23
 446:	10 f0       	brcs	.+4      	; 0x44c <__udivmodhi4_ep>
 448:	a6 1b       	sub	r26, r22
 44a:	b7 0b       	sbc	r27, r23

0000044c <__udivmodhi4_ep>:
 44c:	88 1f       	adc	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	5a 95       	dec	r21
 452:	a9 f7       	brne	.-22     	; 0x43e <__udivmodhi4_loop>
 454:	80 95       	com	r24
 456:	90 95       	com	r25
 458:	bc 01       	movw	r22, r24
 45a:	cd 01       	movw	r24, r26
 45c:	08 95       	ret

0000045e <do_rand>:
 45e:	8f 92       	push	r8
 460:	9f 92       	push	r9
 462:	af 92       	push	r10
 464:	bf 92       	push	r11
 466:	cf 92       	push	r12
 468:	df 92       	push	r13
 46a:	ef 92       	push	r14
 46c:	ff 92       	push	r15
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	ec 01       	movw	r28, r24
 474:	68 81       	ld	r22, Y
 476:	79 81       	ldd	r23, Y+1	; 0x01
 478:	8a 81       	ldd	r24, Y+2	; 0x02
 47a:	9b 81       	ldd	r25, Y+3	; 0x03
 47c:	61 15       	cp	r22, r1
 47e:	71 05       	cpc	r23, r1
 480:	81 05       	cpc	r24, r1
 482:	91 05       	cpc	r25, r1
 484:	21 f4       	brne	.+8      	; 0x48e <do_rand+0x30>
 486:	64 e2       	ldi	r22, 0x24	; 36
 488:	79 ed       	ldi	r23, 0xD9	; 217
 48a:	8b e5       	ldi	r24, 0x5B	; 91
 48c:	97 e0       	ldi	r25, 0x07	; 7
 48e:	2d e1       	ldi	r18, 0x1D	; 29
 490:	33 ef       	ldi	r19, 0xF3	; 243
 492:	41 e0       	ldi	r20, 0x01	; 1
 494:	50 e0       	ldi	r21, 0x00	; 0
 496:	82 d0       	rcall	.+260    	; 0x59c <__divmodsi4>
 498:	49 01       	movw	r8, r18
 49a:	5a 01       	movw	r10, r20
 49c:	27 ea       	ldi	r18, 0xA7	; 167
 49e:	31 e4       	ldi	r19, 0x41	; 65
 4a0:	40 e0       	ldi	r20, 0x00	; 0
 4a2:	50 e0       	ldi	r21, 0x00	; 0
 4a4:	62 d0       	rcall	.+196    	; 0x56a <__mulsi3>
 4a6:	6b 01       	movw	r12, r22
 4a8:	7c 01       	movw	r14, r24
 4aa:	2c ee       	ldi	r18, 0xEC	; 236
 4ac:	34 ef       	ldi	r19, 0xF4	; 244
 4ae:	4f ef       	ldi	r20, 0xFF	; 255
 4b0:	5f ef       	ldi	r21, 0xFF	; 255
 4b2:	c5 01       	movw	r24, r10
 4b4:	b4 01       	movw	r22, r8
 4b6:	59 d0       	rcall	.+178    	; 0x56a <__mulsi3>
 4b8:	dc 01       	movw	r26, r24
 4ba:	cb 01       	movw	r24, r22
 4bc:	8c 0d       	add	r24, r12
 4be:	9d 1d       	adc	r25, r13
 4c0:	ae 1d       	adc	r26, r14
 4c2:	bf 1d       	adc	r27, r15
 4c4:	b7 ff       	sbrs	r27, 7
 4c6:	03 c0       	rjmp	.+6      	; 0x4ce <do_rand+0x70>
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	a1 09       	sbc	r26, r1
 4cc:	b0 48       	sbci	r27, 0x80	; 128
 4ce:	88 83       	st	Y, r24
 4d0:	99 83       	std	Y+1, r25	; 0x01
 4d2:	aa 83       	std	Y+2, r26	; 0x02
 4d4:	bb 83       	std	Y+3, r27	; 0x03
 4d6:	9f 77       	andi	r25, 0x7F	; 127
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	ff 90       	pop	r15
 4de:	ef 90       	pop	r14
 4e0:	df 90       	pop	r13
 4e2:	cf 90       	pop	r12
 4e4:	bf 90       	pop	r11
 4e6:	af 90       	pop	r10
 4e8:	9f 90       	pop	r9
 4ea:	8f 90       	pop	r8
 4ec:	08 95       	ret

000004ee <rand_r>:
 4ee:	b7 df       	rcall	.-146    	; 0x45e <do_rand>
 4f0:	08 95       	ret

000004f2 <rand>:
 4f2:	80 e6       	ldi	r24, 0x60	; 96
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	b3 df       	rcall	.-154    	; 0x45e <do_rand>
 4f8:	08 95       	ret

000004fa <srand>:
 4fa:	a0 e0       	ldi	r26, 0x00	; 0
 4fc:	b0 e0       	ldi	r27, 0x00	; 0
 4fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 502:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 506:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
 50a:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
 50e:	08 95       	ret

00000510 <eeprom_read_byte>:
 510:	e1 99       	sbic	0x1c, 1	; 28
 512:	fe cf       	rjmp	.-4      	; 0x510 <eeprom_read_byte>
 514:	8e bb       	out	0x1e, r24	; 30
 516:	e0 9a       	sbi	0x1c, 0	; 28
 518:	99 27       	eor	r25, r25
 51a:	8d b3       	in	r24, 0x1d	; 29
 51c:	08 95       	ret

0000051e <eeprom_read_dword>:
 51e:	a6 e1       	ldi	r26, 0x16	; 22
 520:	44 e0       	ldi	r20, 0x04	; 4
 522:	0a c0       	rjmp	.+20     	; 0x538 <eeprom_read_blraw>

00000524 <eeprom_write_dword>:
 524:	24 2f       	mov	r18, r20
 526:	15 d0       	rcall	.+42     	; 0x552 <eeprom_write_r18>
 528:	25 2f       	mov	r18, r21
 52a:	13 d0       	rcall	.+38     	; 0x552 <eeprom_write_r18>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <eeprom_write_word>

0000052e <eeprom_write_word>:
 52e:	10 d0       	rcall	.+32     	; 0x550 <eeprom_write_byte>
 530:	27 2f       	mov	r18, r23
 532:	0f c0       	rjmp	.+30     	; 0x552 <eeprom_write_r18>

00000534 <eeprom_read_block>:
 534:	a8 2f       	mov	r26, r24
 536:	86 2f       	mov	r24, r22

00000538 <eeprom_read_blraw>:
 538:	e8 2f       	mov	r30, r24
 53a:	e1 99       	sbic	0x1c, 1	; 28
 53c:	fe cf       	rjmp	.-4      	; 0x53a <eeprom_read_blraw+0x2>
 53e:	05 c0       	rjmp	.+10     	; 0x54a <eeprom_read_blraw+0x12>
 540:	ee bb       	out	0x1e, r30	; 30
 542:	e0 9a       	sbi	0x1c, 0	; 28
 544:	e3 95       	inc	r30
 546:	0d b2       	in	r0, 0x1d	; 29
 548:	0d 92       	st	X+, r0
 54a:	41 50       	subi	r20, 0x01	; 1
 54c:	c8 f7       	brcc	.-14     	; 0x540 <eeprom_read_blraw+0x8>
 54e:	08 95       	ret

00000550 <eeprom_write_byte>:
 550:	26 2f       	mov	r18, r22

00000552 <eeprom_write_r18>:
 552:	e1 99       	sbic	0x1c, 1	; 28
 554:	fe cf       	rjmp	.-4      	; 0x552 <eeprom_write_r18>
 556:	1c ba       	out	0x1c, r1	; 28
 558:	8e bb       	out	0x1e, r24	; 30
 55a:	2d bb       	out	0x1d, r18	; 29
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	f8 94       	cli
 560:	e2 9a       	sbi	0x1c, 2	; 28
 562:	e1 9a       	sbi	0x1c, 1	; 28
 564:	0f be       	out	0x3f, r0	; 63
 566:	01 96       	adiw	r24, 0x01	; 1
 568:	08 95       	ret

0000056a <__mulsi3>:
 56a:	ee 27       	eor	r30, r30
 56c:	ff 27       	eor	r31, r31

0000056e <__mulsi3_helper>:
 56e:	aa 27       	eor	r26, r26
 570:	bb 27       	eor	r27, r27
 572:	08 c0       	rjmp	.+16     	; 0x584 <__mulsi3_helper+0x16>
 574:	a2 0f       	add	r26, r18
 576:	b3 1f       	adc	r27, r19
 578:	e4 1f       	adc	r30, r20
 57a:	f5 1f       	adc	r31, r21
 57c:	22 0f       	add	r18, r18
 57e:	33 1f       	adc	r19, r19
 580:	44 1f       	adc	r20, r20
 582:	55 1f       	adc	r21, r21
 584:	96 95       	lsr	r25
 586:	87 95       	ror	r24
 588:	77 95       	ror	r23
 58a:	67 95       	ror	r22
 58c:	98 f3       	brcs	.-26     	; 0x574 <__mulsi3_helper+0x6>
 58e:	70 40       	sbci	r23, 0x00	; 0
 590:	a9 f7       	brne	.-22     	; 0x57c <__mulsi3_helper+0xe>
 592:	00 97       	sbiw	r24, 0x00	; 0
 594:	99 f7       	brne	.-26     	; 0x57c <__mulsi3_helper+0xe>
 596:	bd 01       	movw	r22, r26
 598:	cf 01       	movw	r24, r30
 59a:	08 95       	ret

0000059c <__divmodsi4>:
 59c:	05 2e       	mov	r0, r21
 59e:	97 fb       	bst	r25, 7
 5a0:	16 f4       	brtc	.+4      	; 0x5a6 <__divmodsi4+0xa>
 5a2:	00 94       	com	r0
 5a4:	0f d0       	rcall	.+30     	; 0x5c4 <__negsi2>
 5a6:	57 fd       	sbrc	r21, 7
 5a8:	05 d0       	rcall	.+10     	; 0x5b4 <__divmodsi4_neg2>
 5aa:	14 d0       	rcall	.+40     	; 0x5d4 <__udivmodsi4>
 5ac:	07 fc       	sbrc	r0, 7
 5ae:	02 d0       	rcall	.+4      	; 0x5b4 <__divmodsi4_neg2>
 5b0:	46 f4       	brtc	.+16     	; 0x5c2 <__divmodsi4_exit>
 5b2:	08 c0       	rjmp	.+16     	; 0x5c4 <__negsi2>

000005b4 <__divmodsi4_neg2>:
 5b4:	50 95       	com	r21
 5b6:	40 95       	com	r20
 5b8:	30 95       	com	r19
 5ba:	21 95       	neg	r18
 5bc:	3f 4f       	sbci	r19, 0xFF	; 255
 5be:	4f 4f       	sbci	r20, 0xFF	; 255
 5c0:	5f 4f       	sbci	r21, 0xFF	; 255

000005c2 <__divmodsi4_exit>:
 5c2:	08 95       	ret

000005c4 <__negsi2>:
 5c4:	90 95       	com	r25
 5c6:	80 95       	com	r24
 5c8:	70 95       	com	r23
 5ca:	61 95       	neg	r22
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255
 5ce:	8f 4f       	sbci	r24, 0xFF	; 255
 5d0:	9f 4f       	sbci	r25, 0xFF	; 255
 5d2:	08 95       	ret

000005d4 <__udivmodsi4>:
 5d4:	a1 e2       	ldi	r26, 0x21	; 33
 5d6:	1a 2e       	mov	r1, r26
 5d8:	aa 1b       	sub	r26, r26
 5da:	bb 1b       	sub	r27, r27
 5dc:	fd 01       	movw	r30, r26
 5de:	0d c0       	rjmp	.+26     	; 0x5fa <__udivmodsi4_ep>

000005e0 <__udivmodsi4_loop>:
 5e0:	aa 1f       	adc	r26, r26
 5e2:	bb 1f       	adc	r27, r27
 5e4:	ee 1f       	adc	r30, r30
 5e6:	ff 1f       	adc	r31, r31
 5e8:	a2 17       	cp	r26, r18
 5ea:	b3 07       	cpc	r27, r19
 5ec:	e4 07       	cpc	r30, r20
 5ee:	f5 07       	cpc	r31, r21
 5f0:	20 f0       	brcs	.+8      	; 0x5fa <__udivmodsi4_ep>
 5f2:	a2 1b       	sub	r26, r18
 5f4:	b3 0b       	sbc	r27, r19
 5f6:	e4 0b       	sbc	r30, r20
 5f8:	f5 0b       	sbc	r31, r21

000005fa <__udivmodsi4_ep>:
 5fa:	66 1f       	adc	r22, r22
 5fc:	77 1f       	adc	r23, r23
 5fe:	88 1f       	adc	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	1a 94       	dec	r1
 604:	69 f7       	brne	.-38     	; 0x5e0 <__udivmodsi4_loop>
 606:	60 95       	com	r22
 608:	70 95       	com	r23
 60a:	80 95       	com	r24
 60c:	90 95       	com	r25
 60e:	9b 01       	movw	r18, r22
 610:	ac 01       	movw	r20, r24
 612:	bd 01       	movw	r22, r26
 614:	cf 01       	movw	r24, r30
 616:	08 95       	ret

00000618 <_exit>:
 618:	f8 94       	cli

0000061a <__stop_program>:
 61a:	ff cf       	rjmp	.-2      	; 0x61a <__stop_program>
